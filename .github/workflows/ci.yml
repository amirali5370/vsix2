name: CI

on:
    push:
        branches:
            - gh-action-ci # !!!! replace with master before the PR

env:
    # PVSC_WORKDIR: vscode-python
    PYTHON_VERSION: 3.8
    # Key for the cache created at the end of the "Checkout" job to be reused in other jobs
    CACHE_CHECKOUT: cache-pvsc-checkout
    # Key for the pip cache
    CACHE_PIP_DEPS: cache-pip
    # Key for the npm cache
    CACHE_NPM_DEPS: cache-npm
    # Key for the cache created at the end of the the "python-deps" job to be reused in other jobs
    CACHE_PYTHONFILES: cache-pvsc-pythonFiles
    # Name of the VSIX artifact
    ARTIFACT_NAME_VSIX: pvsc-vsix

jobs:
    ### Pre-run tool check
    show-tools-versions:
        name: Show tools versions
        runs-on: ubuntu-latest
        steps:
            - name: Node
              run: node --version

            - name: npm
              run: npm --version

    ### Initialization
    checkout:
        name: Checkout and cache
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Cache repo
              uses: actions/cache@v1
              with:
                  path: .
                  key: ${{runner.os}}-${{env.CACHE_CHECKOUT}}

    python-deps:
        name: Install Python Requirements
        runs-on: ubuntu-latest
        needs: [checkout]
        steps:
            - name: Retrieve cached repo
              uses: actions/cache@v1
              with:
                  path: .
                  key: ${{runner.os}}-${{env.CACHE_CHECKOUT}}

            - name: Use Python ${{env.PYTHON_VERSION}}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{env.PYTHON_VERSION}}

            - name: Upgrade pip
              run: python -m pip install -U pip

            - name: Install Python requirements
              run: |
                  python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
                  python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
                  python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/new_ptvsd/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre ptvsd

            - name: Install ptvsd wheels
              run: |
                  python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
                  python ./pythonFiles/install_ptvsd.py

            - name: Cache ./pythonFiles/lib/python
              uses: actions/cache@v1
              with:
                  path: ./pythonFiles/lib/python
                  key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-${{hashFiles('pythonFiles/**')}}

            - name: Cache pip files
              uses: actions/cache@v1
              with:
                  path: ~/.cache/pip
                  key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-${{hashFiles('**/requirements.txt')}}

    js-ts-deps:
        name: Install NPM dependencies
        runs-on: ubuntu-latest
        needs: [checkout]
        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install dependencies (npm ci)
              run: npm ci

            - name: Cache npm files
              uses: actions/cache@v1
              with:
                  path: ~/.npm
                  key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{ hashFiles('**/package-lock.json') }}
    ### Hygiene + VSIX upload
    # compile:
    #     name: Compile and check for errors
    #     runs-on: ubuntu-latest
    #     needs: [checkout]
    #     steps:
    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: ${{env.ARTIFACT_NAME_CHECKOUT}}
    #               path: ${{env.PVSC_WORKDIR}}
    #         - name: Install dependencies (npm ci)
    #           run: npm ci
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Run gulp prePublishNonBundle
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #           run: npx gulp prePublishNonBundle
    # check-dependencies:
    #     name: Check dependencies
    #     runs-on: ubuntu-latest
    #     needs: [checkout]
    #     steps:
    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: ${{env.ARTIFACT_NAME_CHECKOUT}}
    #               path: ${{env.PVSC_WORKDIR}}
    #         - name: Install dependencies (npm ci)
    #           run: npm ci
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Check dependencies
    #           run: npm run checkDependencies
    #           working-directory: ${{env.PVSC_WORKDIR}}
    # lint-format-js-ts:
    #     name: Hygiene (JS/TS)
    #     runs-on: ubuntu-latest
    #     needs: [checkout]
    #     steps:
    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: ${{env.ARTIFACT_NAME_CHECKOUT}}
    #               path: ${{env.PVSC_WORKDIR}}
    #         - name: Install dependencies (npm ci)
    #           run: npm ci
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Run linting
    #           run: npx tslint --project tsconfig.json
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Run prettier on TypeScript code
    #           run: npx prettier "src/**/*.ts*" --check
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Run prettier on JavaScript code
    #           run: npx prettier "build/**/*.js" --check
    #           working-directory: ${{env.PVSC_WORKDIR}}
    # code-format-python:
    #     name: Code Format (Python)
    #     runs-on: ubuntu-latest
    #     needs: [checkout]
    #     steps:
    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: ${{env.ARTIFACT_NAME_CHECKOUT}}
    #               path: ${{env.PVSC_WORKDIR}}
    #         - name: Use Python ${{env.PYTHON_VERSION}}
    #           uses: actions/setup-python@v1
    #           with:
    #               python-version: ${{env.PYTHON_VERSION}}
    #         - name: Upgrade pip
    #           run: python -m pip install -U pip
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Run Black on Python code
    #           run: |
    #               python -m pip install -U black
    #               python -m black . --check
    #           working-directory: ${{env.PVSC_WORKDIR}}/pythonFiles
    # build-vsix:
    #     name: Build VSIX
    #     runs-on: ubuntu-latest
    #     needs: [python-reqs]
    #     steps:
    #         - uses: actions/download-artifact@v1
    #           with:
    #               name: ${{env.ARTIFACT_NAME_PYTHON_REQS}}
    #               path: ${{env.PVSC_WORKDIR}}
    #         - name: Install dependencies (npm ci)
    #           run: npm ci
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - name: Package the VSIX
    #           run: npm run package
    #           working-directory: ${{env.PVSC_WORKDIR}}
    #         - uses: actions/upload-artifact@v1
    #           with:
    #               name: ${{env.ARTIFACT_NAME_VSIX}}
    #               path: ${{env.PVSC_WORKDIR}}/ms-python-insiders.vsix
