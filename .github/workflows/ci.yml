name: CI

on:
  push:
    branches:
      # TODO: replace the current test branch with master
      # - master
      - gh-action-ci-tests

env:
  PYTHON_VERSION: 3.8
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  ARTIFACT_NAME_VSIX: ms-python-insiders-vsix
  TEST_RESULTS_DIRECTORY: .

jobs:
  ### Initialization: retrieve, install and cache dependencies
  python-deps:
    name: Install Python Requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Install Python requirements
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/new_ptvsd/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre ptvsd

      - name: Install ptvsd wheels
        run: |
          python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
          python ./pythonFiles/install_ptvsd.py

      # Retrieve the list of ptvsd versions from PyPI in order to increase the specificity of the pip cache key, so that the cache gets invalidated as necessary.
      # See https://github.com/microsoft/vscode-python/pull/9843#discussion_r373635221
      - name: curl PyPI to get ptvsd versions
        run: curl --output ptvsd.json https://pypi.org/pypi/ptvsd/json

      - name: Cache pip files
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/**-requirements.txt')}}-${{hashFiles('ptvsd.json')}}

      - name: Cache ./pythonFiles/lib/python
        uses: actions/cache@v1
        with:
          path: ./pythonFiles/lib/python
          key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/**-requirements.txt')}}-${{hashFiles('ptvsd.json')}}

  js-ts-deps:
    name: Install npm dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Cache npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

  ### Hygiene + VSIX upload
  compile-hygiene:
    name: Compile, lint, check for errors
    runs-on: ubuntu-latest
    needs: [js-ts-deps, python-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Run gulp prePublishNonBundle
        run: npx gulp prePublishNonBundle

      - name: Cache the out/ directory
        uses: actions/cache@v1
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('out/**')}}

      - name: Check dependencies
        run: npm run checkDependencies

      - name: Run linting on TypeScript code
        run: npx tslint --project tsconfig.json

      - name: Run prettier on TypeScript code
        run: npx prettier 'src/**/*.ts*' --check

      - name: Run prettier on JavaScript code
        run: npx prettier 'build/**/*.js' --check

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Run Black on Python code
        run: |
          python -m pip install -U black
          python -m black . --check
        working-directory: pythonFiles

        # TODO: uncomment this job when PR is ready for review
  # build-vsix:
  #   name: Build VSIX
  #   runs-on: ubuntu-latest
  #   needs: [python-deps, js-ts-deps]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Retrieve cached npm files
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.npm
  #         key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

  #     - name: curl PyPI to get ptvsd versions
  #       run: curl --output ptvsd.json https://pypi.org/pypi/ptvsd/json

  #     - name: Retrieve cached pythonFiles/ directory
  #       uses: actions/cache@v1
  #       with:
  #         path: ./pythonFiles/lib/python
  #         key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('requirements.txt')}}-${{hashFiles('build/**-requirements.txt')}}-${{hashFiles('ptvsd.json')}}

  #     - name: Install dependencies (npm ci)
  #       run: npm ci --prefer-offline

  #     - name: Clean directory
  #       run: npm run clean

  #     - name: Package the VSIX
  #       run: npm run package
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: ${{env.ARTIFACT_NAME_VSIX}}
  #         path: ms-python-insiders.vsix

  ### Non-smoke tests
  tests:
    name: Tests
    # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
    runs-on: ${{ matrix.os }}
    needs: [python-deps, js-ts-deps]
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python: [3.6, 3.7]
        python: [3.7]
        os: [ubuntu-latest]
        # tests: [unit, python-unit, ipython, venv, single-workspace, multi-workspace, debugger, functional]
        tests: [debugger]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci

      - name: Retrieve cached compile output directory
        # Use an id for this step so that its cache-it output can be accessed and checked in the next step.
        id: out-cache
        uses: actions/cache@v1
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('out/**')}}

      - name: Compile if not cached
        run: npx gulp prePublishNonBundle
        if: steps.out-cache.outputs.cache-hit == false

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.python}}

      - name: Retrieve cached pythonFiles/ directory
        uses: actions/cache@v1
        id: pythonFiles-cache
        with:
          path: ./pythonFiles/lib/python
          key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('**/**-requirements.txt')}}

      - name: Install Python requirements if not cached
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/new_ptvsd/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre ptvsd
        if: steps.pythonFiles-cache.outputs.cache-hit == false

      - name: Install ptvsd wheels if not cached
        run: |
          python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
          python ./pythonFiles/install_ptvsd.py
        if: steps.pythonFiles-cache.outputs.cache-hit == false

      - name: Install test requirements
        run: python -m pip install --upgrade -r build/test-requirements.txt

      - name: Install IPython test requirements
        run: |
          python -m pip install numpy
          python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
        if: matrix.tests == 'ipython'

      - name: Install functional test requirements
        run: |
          python -m pip install numpy
          python -m pip install --upgrade -r ./build/functional-test-requirements.txt
        if: matrix.tests == 'functional'

      # Downgrade pywin32 on Windows because of a bug https://github.com/jupyter/notebook/issues/4909.
      # Only needed for functional tests.
      - name: Downgrade pywin32 for functional tests on Windows + Python 3.6
        run: python -m pip install --upgrade pywin32==224
        if: matrix.tests == 'functional' && matrix.os == 'windows-latest' && matrix.python == 3.6

      # Run TypeScript unit tests only for Python 3.7
      - name: Run TypeScript unit tests
        run: npm run test:unittests:cover
        if: matrix.tests == 'unit' && matrix.python == 3.7

      - name: Run Python unit tests
        run: python pythonFiles/tests/run_all.py --color=no --junit-xml=${{env.TEST_RESULTS_DIRECTORY}}/python-tests-junit.xml
        if: matrix.tests == 'python-unit'

      # Run the Python IPython tests in our codebase.
      # Produces a JUnit-style log file that will be uploaded after all tests are complete.
      - name: Run IPython unit tests
        run: python -m IPython pythonFiles/tests/run_all.py -- --color=no --junit-xml=${{env.TEST_RESULTS_DIRECTORY}}/ipython-tests-junit.xml
        if: matrix.tests == 'ipython'

      # - name: Run venv tests
      #   run: todo
      #   if: matrix.tests == 'venv'

      - name: Run single-workspace tests
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm run testSingleWorkspace
        if: matrix.tests == 'single-workspace'

      - name: Run multi-workspace tests
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm run testMultiWorkspace
        if: matrix.tests == 'multi-workspace'

      - name: Run debugger tests
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm run testDebugger
        if: matrix.tests == 'debugger'

      - name: Run functional tests
        run: npm run test:functional
        if: matrix.tests == 'functional'
