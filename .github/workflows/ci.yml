name: CI

on:
  push:
    branches:
      - gh-action-tests

env:
  PYTHON_VERSION: 3.8
  CACHE_NPM_DEPS: cache-npm
  CACHE_PIP_DEPS: cache-pip
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  ARTIFACT_NAME_VSIX: ms-python-insiders-vsix

jobs:
  ### Pre-run tool check
  show-tools-versions:
    name: Show tools versions
    runs-on: ubuntu-latest
    steps:
      - name: Node
        run: node --version

      - name: npm
        run: npm --version

  ### Initialization: retrieve, install and cache dependencies
  python-deps:
    name: Install Python Requirements
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Install Python requirements
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/new_ptvsd/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre ptvsd

      - name: Install ptvsd wheels
        run: |
          python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
          python ./pythonFiles/install_ptvsd.py

      - name: Cache ./pythonFiles/lib/python
        uses: actions/cache@v1
        with:
          path: ./pythonFiles/lib/python
          key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('**/**-requirements.txt')}}

      - name: Cache pip files
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('**/**-requirements.txt')}}

  js-ts-deps:
    name: Install npm dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies (npm ci)
        run: npm ci

      - name: Cache npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

  ### Hygiene + VSIX upload
  compile:
    name: Compile and check for errors
    runs-on: ubuntu-latest
    needs: [js-ts-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci

      - name: Run gulp prePublishNonBundle
        run: npx gulp prePublishNonBundle

  check-dependencies:
    name: Check dependencies
    runs-on: ubuntu-latest
    needs: [js-ts-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci

      - name: Check dependencies
        run: npm run checkDependencies

  hygiene-js-ts:
    name: Hygiene (JS/TS)
    runs-on: ubuntu-latest
    needs: [js-ts-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci

      - name: Run linting
        run: npx tslint --project tsconfig.json

      - name: Run prettier on TypeScript code
        run: npx prettier 'src/**/*.ts*' --check

      - name: Run prettier on JavaScript code
        run: npx prettier 'build/**/*.js' --check

  hygiene-python:
    name: Hygiene (Python)
    runs-on: ubuntu-latest
    needs: [python-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Run Black on Python code
        run: |
          python -m pip install -U black
          python -m black . --check
        working-directory: pythonFiles

  build-vsix:
    name: Build VSIX
    runs-on: ubuntu-latest
    needs: [python-deps, js-ts-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Retrieve cached pythonFiles/ directory
        uses: actions/cache@v1
        with:
          path: ./pythonFiles/lib/python
          key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('**/**-requirements.txt')}}

      - name: Install dependencies (npm ci)
        run: npm ci

      - name: Clean directory
        run: npm run clean

      - name: Package the VSIX
        run: npm run package

      - uses: actions/upload-artifact@v1
        with:
          name: ${{env.ARTIFACT_NAME_VSIX}}
          path: ms-python-insiders.vsix

  ### Non-smoke tests
  tests:
    name: Tests
    # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
    runs-on: ${{ matrix.os }}
    needs: [python-reqs]
    strategy:
        matrix:
            # os: [ubuntu-latest, macos-latest, windows-latest]
            # python: [3.6, 3.7]
            python: [3.7]
            os: [ubuntu-latest]
            tests: [unit, python-unit]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Retrieve cached npm files
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
          run: npm ci

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.python}}

      - name: Retrieve cached pythonFiles/ directory
        uses: actions/cache@v1
        id: python-cache
        with:
          path: ./pythonFiles/lib/python
          key: ${{runner.os}}-${{env.CACHE_PYTHONFILES}}-python-${{env.PYTHON_VERSION}}-${{hashFiles('**/**-requirements.txt')}}

      - name: Install Python requirements if not cached
        run: |
            python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
            python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
            python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/new_ptvsd/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre ptvsd
        if: python-cache.outputs.cache-hit == false
  
      - name: Install ptvsd wheels if not cached
        run: |
            python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
            python ./pythonFiles/install_ptvsd.py
        if: python-cache.outputs.cache-hit == false

      - name: Install test requirements
        run: python -m pip install --upgrade -r build/test-requirements.txt
        working-directory: ${{env.PVSC_WORKDIR}}

        # - name: Install IPython test requirements
        #   run: |
        #     python -m pip install numpy
        #     python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
        #   working-directory: ${{env.PVSC_WORKDIR}}
        #   if: matrix.tests == ipython

        # - name: Install functional test requirements
        #   run: |
        #     python -m pip install numpy
        #     python -m pip install --upgrade -r ./build/functional-test-requirements.txt
        #   working-directory: ${{env.PVSC_WORKDIR}}
        #   if: matrix.tests == functional

        # - name: Downgrade pywin32 for functional tests on Windows + Python 3.6
        #   run: python -m pip install --upgrade pywin32==224
        #   working-directory: ${{env.PVSC_WORKDIR}}
        #   if: matrix.tests == functional && matrix.os == windows-latest && matrix.python == 3.6

        # - name: Run TypeScript unit tests
        #   run: npm run unittests:cover
        #   working-directory: ${{env.PVSC_WORKDIR}}
        #   if: matrix.tests == unit

        # - name: Run Python unit tests
        #   run: python pythonFiles/tests/run_all.py --color=no --junit-xml=$COMMON_TESTRESULTSDIRECTORY/python-tests-junit.xml
        #   working-directory: ${{env.PVSC_WORKDIR}}
        #   if: matrix.tests == python-unit
