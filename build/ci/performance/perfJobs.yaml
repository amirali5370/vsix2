jobs:
- job: Testing_Round_1
  timeoutInMinutes: 120
  strategy:
    matrix:
      'Win-Py3.7':
        PythonVersion: '3.7'
        VMImageName: 'vs2017-win2016'
  pool:
    vmImage: $(VMImageName)
  steps:
    - bash: |
        python -m pip install --upgrade -r build/test-requirements.txt
        python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
        python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/old_ptvsd --no-cache-dir --implementation py --no-deps --upgrade 'ptvsd==4.3.2'
        python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python/new_ptvsd/no_wheels --no-cache-dir --implementation py --no-deps --upgrade --pre ptvsd
        sudo apt-get install libsqlite3-dev
        python -m pip install pysqlite
        python -m pip install numpy
        python -m pip install --upgrade -r ./build/functional-test-requirements.txt
        python -m pip install --upgrade pywin32==224
    - pwsh: |
          # venv/bin or venv\\Scripts (windows)?
          $environmentExecutableFolder = 'bin'
          if ($Env:AGENT_OS -match '.*Windows.*') {
            $environmentExecutableFolder = 'Scripts'
          }

          # pipenv
          python -m pip install pipenv
          python -m pipenv run python build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) pipenvPath

          # venv
          # what happens when running under Python 2.7?
          python -m venv .venv
          & ".venv/$environmentExecutableFolder/python" ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) venvPath

          # virtualenv
          python -m pip install virtualenv
          python -m virtualenv .virtualenv
          & ".virtualenv/$environmentExecutableFolder/python" ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) virtualEnvPath

          # conda

          # 1. For `terminalActivation.testvirtualenvs.test.ts`

          $condaExecPath = Join-Path -Path $Env:CONDA -ChildPath $environmentExecutableFolder | Join-Path -ChildPath conda
          if( '$(Agent.Os)' -match '.*Windows.*' ){
              $condaPythonPath = Join-Path -Path $Env:CONDA -ChildPath python
          } else{
              $condaPythonPath = Join-Path -Path $Env:CONDA -ChildPath $environmentExecutableFolder | Join-Path -ChildPath python
              & $condaPythonPath ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) condaExecPath $condaExecPath
          }
          & $condaPythonPath ./build/ci/addEnvPath.py $(PYTHON_VIRTUAL_ENVS_LOCATION) condaPath

          # 2. For `interpreterLocatorService.testvirtualenvs.ts`

          & $condaExecPath create -n "test_env1" -y python
          & $condaExecPath create -p "./test_env2" -y python
          & $condaExecPath create -p "$Env:HOME/test_env3" -y python

          # Set the TEST_FILES_SUFFIX
          Write-Host '##vso[task.setvariable variable=TEST_FILES_SUFFIX;]testvirtualenvs'
    - bash: |
        npm install
        npm install -g mocha
        npm install -g source-map-support
        npm install -g mocha-multi-reporters
        tsc -p ./
        mocha --require source-map-support/register --opts ./build/.mocha.performance.opts
        node ./build/ci/performance/savePerformanceResults.js

- job: Testing_Round_2
  dependsOn:
  - Testing_Round_1
  timeoutInMinutes: 120
  strategy:
    matrix:
      'Win-Py3.7':
        PythonVersion: '3.7'
        VMImageName: 'vs2017-win2016'
  pool:
    vmImage: $(VMImageName)
  steps:
    - bash: |
        mocha --require source-map-support/register --opts ./build/.mocha.performance.opts
        node ./build/ci/performance/savePerformanceResults.js

- job: Testing_Round_3
  dependsOn:
  - Testing_Round_2
  timeoutInMinutes: 120
  strategy:
    matrix:
      'Win-Py3.7':
        PythonVersion: '3.7'
        VMImageName: 'vs2017-win2016'
  pool:
    vmImage: $(VMImageName)
  steps:
    - bash: |
        mocha --require source-map-support/register --opts ./build/.mocha.performance.opts
        node ./build/ci/performance/savePerformanceResults.js

- job: Testing_Round_4
  dependsOn:
  - Testing_Round_3
  timeoutInMinutes: 120
  strategy:
    matrix:
      'Win-Py3.7':
        PythonVersion: '3.7'
        VMImageName: 'vs2017-win2016'
  pool:
    vmImage: $(VMImageName)
  steps:
    - bash: |
        mocha --require source-map-support/register --opts ./build/.mocha.performance.opts
        node ./build/ci/performance/savePerformanceResults.js

- job: Testing_Round_5
  dependsOn:
  - Testing_Round_4
  timeoutInMinutes: 120
  strategy:
    matrix:
      'Win-Py3.7':
        PythonVersion: '3.7'
        VMImageName: 'vs2017-win2016'
  pool:
    vmImage: $(VMImageName)
  steps:
    - bash: |
        mocha --require source-map-support/register --opts ./build/.mocha.performance.opts
        node ./build/ci/performance/savePerformanceResults.js
