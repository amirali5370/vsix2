# -----------------------------------------------------------------------------------------------------------------------------
# Overview:
# -----------------------------------------------------------------------------------------------------------------------------
# Steps to be executed as part of the UI tests.
# 1. Show all env vars                        - Logging (display environment variables).
# 2. Use Node                                 - Specify and use node version.
# 3. Setup Python ? for extension             - Version of Python to be used for testing in Extension.
# 4. Setup CI_PYTHON_PATH for extension       - Export Env variable that'll be used by a seprate step.
#                                               Note: This env variable is NOT used by any Code (used purely in the Azdo step further below).
# 5. Use Python 2.7                           - Ensure minimum version of Python (2.7) is available on CI for Python Extension.
# 6. Use Python 3.7                           - Ensure latest version of Python (3.7) is available on CI for Python Extension.
# 7. npm ci                                   - Install npm packages for some JS scripts used in testing (NOT for extension).
# 8. Show Dependency Versions                 - Logging.
# 9. Start xvfb                               - Start in-memory display server (for launching VSC).
# 10. Restore VSIX                            - VSIX has been built in another Job, download that from artifacts.
# 11. Copy VSIX                               - Copy the VSIX into root directory (test suite expects it to be in root - default setup).
# 12. Compile                                 - Npm compile
# 13. Run Tests                               - Launch the UI tests in Nodejs
# 14. Copy Reports
# 15. Copy Screenshots
# 16. Copy Extension Logs
# 17. Copy VSC Logs
# 18. Upload Reports                          - Upload as artifacts to Azure Devops
# 19. Test Results                            - Upload test results to Azure Devops
# -----------------------------------------------------------------------------------------------------------------------------
# Variables:
# -----------------------------------------------------------------------------------------------------------------------------
# 1. VSCodeChannel
#   Mandatory.
#   VS Code channel to be tested against. `stable` or `insider`.
# 2. Tags
#   Mandatory.
#   Contain the `--tags=....` arguments to be passed into behave to exclude certain tags.
#   Multiple tags can be passed as `@smoke and not @ignore1 and @another and not @andMore`
#   More information on --tags argument for behave can be found here:
#       * https://behave.readthedocs.io/en/latest/tutorial.html#controlling-things-with-tags
#       * https://behave.readthedocs.io/en/latest/tag_expressions.html
# 3. PythonVersion
#   Python version to be used.
# 4. VMImageName
#   VM Image to be used (standard Azure Devops variable).


steps:
    - bash: |
          printenv
      displayName: "Show all env vars"
      condition: eq(variables['system.debug'], 'true')

    - task: NodeTool@0
      displayName: "Use Node $(NodeVersion)"
      inputs:
          versionSpec: $(NodeVersion)

    - task: UsePythonVersion@0
      displayName: "Setup Python $(PythonVersion) for extension"
      inputs:
          versionSpec: $(PythonVersion)

    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: Take ownership of conda installation
      condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

    - script: |
          export CI_PYTHON_PATH=`which python`
          echo '##vso[task.setvariable variable=CI_PYTHON_PATH]'$CI_PYTHON_PATH
      displayName: "Setup CI_PYTHON_PATH for extension"
      condition: and(succeeded(), not(eq(variables['agent.os'], 'Windows_NT')))

    - powershell: |
          $CI_PYTHON_PATH = (get-command  python).path
          Write-Host "##vso[task.setvariable variable=CI_PYTHON_PATH]$CI_PYTHON_PATH"
          Write-Host $CI_PYTHON_PATH
      displayName: "Setup CI_PYTHON_PATH for extension"
      condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

    # Conda
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
      condition: and(succeeded(), not(eq(variables['agent.os'], 'Windows_NT')))

    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH
      condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

    # Some tests need to have both 2.7 & 3.7 available.
    - task: UsePythonVersion@0
      displayName: "Use Python 2.7"
      inputs:
          versionSpec: 2.7

    - task: UsePythonVersion@0
      displayName: "Use Python 3.7"
      inputs:
          versionSpec: 3.7

    - task: Npm@1
      displayName: "Use NPM $(NpmVersion)"
      inputs:
          command: custom
          verbose: true
          customCommand: "install -g npm@$(NpmVersion)"

    - task: Npm@1
      displayName: "npm ci"
      inputs:
          command: custom
          verbose: true
          customCommand: ci

    - bash: |
          echo AVAILABLE DEPENDENCY VERSIONS
          echo Node Version = `node -v`
          echo NPM Version = `npm -v`
          echo Python Version = `python --version`
          echo Gulp Version = `gulp --version`
      condition: and(succeeded(), eq(variables['system.debug'], 'true'))
      displayName: Show Dependency Versions

    # https://code.visualstudio.com/api/working-with-extensions/continuous-integration#azure-pipelines
    - bash: |
          set -e
          /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
          disown -ar
      displayName: "Start xvfb"
      condition: and(succeeded(), eq(variables['Agent.Os'], 'Linux'), not(variables['SkipXvfb']))

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #       buildType: "current"
    #       artifactName: "VSIX"
    #       downloadPath: "$(Build.SourcesDirectory)"
    #   displayName: "Restore VSIX"
    #   condition: succeeded()

    # - task: CopyFiles@2
    #   inputs:
    #       sourceFolder: "$(Build.SourcesDirectory)/VSIX"
    #       targetFolder: $(Build.SourcesDirectory)
    #   displayName: "Copy VSIX"
    #   condition: succeeded()

    # Compile
    - bash: npm run compile-smoke
      displayName: "Compile"
      condition: succeeded()

    - bash: |
          cd ./src/smoke/bootstrap/extension
          npm install -g vsce
          npm run build
      displayName: "Build Bootstrap Extension"
      condition: succeeded()

    # Skip @skip tagged tests
    # Always dump to a text file (easier than scrolling and downloading the logs seprately).
    # This way all logs are part of the artificat for each test.
    - bash: |
          mkdir -p './.vscode test/reports'
          npm run smokeTest -- --channel=$(VSCodeChannel) --tags='$(Tags) and not @skip' --pythonPath=$(CI_PYTHON_PATH) | tee '.vscode test/reports/log.log'
      env:
          DISPLAY: :10
          AgentJobName: $(Agent.JobName)
          AZURE_COGNITIVE_ENDPOINT: $(AZURE_COGNITIVE_ENDPOINT)
          AZURE_COGNITIVE_KEY: $(AZURE_COGNITIVE_KEY)
          VSCODE_CHANNEL: $(VSCodeChannel)
          CI_PYTHON_PATH: $(CI_PYTHON_PATH)
          PYTHON_VERSION: $(PythonVersion)
      displayName: "Run Tests"
      condition: succeeded()

    # Generate and publish results even if there are failures in previous steps.
    - bash: npm run smokeTest:report
      env:
          AgentJobName: $(Agent.JobName)
      displayName: "Generate Reports"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode test/reports/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy Reports"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode test/screenshots/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy Screenshots"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode test/logs/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy Extension Logs"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode test/user/logs/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy VSC Logs"
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: $(Agent.JobName)
      displayName: "Upload Reports"
      condition: always()

    - task: PublishTestResults@2
      displayName: "TestResults"
      inputs:
          testRunTitle: $(Agent.JobName)
          testRunner: JUnit
          testResultsFiles: "$(Build.SourcesDirectory)/.vscode test/reports/*.xml"
      condition: always()
