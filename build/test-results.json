[
  {
    "name": "Activation - ActivationManager Initialize will add event handlers and will dispose them when running dispose",
    "time": 0.011
  },
  {
    "name": "Activation - ActivationManager Remove text document opened handler if there is only one workspace",
    "time": 0.003
  },
  {
    "name": "Activation - ActivationManager Activate workspace specific to the resource in case of Multiple workspaces when a file is opened",
    "time": 0.031
  },
  {
    "name": "Activation - ActivationManager Function activateWorkspace() will be filtered to current resource",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationManager Handler docOpenedHandler is disposed in case no. of workspace folders decreases to one",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled LS is supported",
    "time": 0.004
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled LS is not supported",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Activatory must be activated",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Activatory must be deactivated",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Prompt user to reload VS Code and reload, when setting is toggled",
    "time": 0.004
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Prompt user to reload VS Code and do not reload, when setting is toggled",
    "time": 0.004
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Do not prompt user to reload VS Code when setting is not toggled",
    "time": 0.003
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Do not prompt user to reload VS Code when setting is not changed",
    "time": 0.004
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is enabled Jedi is only activated once",
    "time": 0.003
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled LS is supported",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled LS is not supported",
    "time": 0.006
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Activatory must be activated",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Activatory must be deactivated",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Prompt user to reload VS Code and reload, when setting is toggled",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Prompt user to reload VS Code and do not reload, when setting is toggled",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Do not prompt user to reload VS Code when setting is not toggled",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Do not prompt user to reload VS Code when setting is not changed",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Revert to jedi when LS activation fails",
    "time": 0.008
  },
  {
    "name": "Activation - ActivationService Test activation - Jedi is disabled Activator is disposed if activated workspace is removed",
    "time": 0.006
  },
  {
    "name": "Activation - ActivationService Test trackLangaugeServerSwitch() Track current LS usage for first usage",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Test trackLangaugeServerSwitch() Track switch to LS",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Test trackLangaugeServerSwitch() Track switch to Jedi",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Test useJedi() If default value of jedi is being used, and LSEnabled experiment is enabled, then return false",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Test useJedi() If default value of jedi is being used, and LSEnabled experiment is disabled, then send telemetry if user is in Experiment LSControl and return python settings value (which will always be true as default value is true)",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Test useJedi() If default value of jedi is not being used, then no experiments are used, and python settings value is returned Returns false when python settings value is false",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Test useJedi() If default value of jedi is not being used, then no experiments are used, and python settings value is returned Returns true when python settings value is true",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns true for setting = {}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceFolderValue&quot;:true}",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceFolderValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true}",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceFolderValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceFolderValue&quot;:false}",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false}",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:true,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceFolderValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceFolderValue&quot;:false}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:true,&quot;workspaceFolderValue&quot;:false}",
    "time": 0.002
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:true}",
    "time": 0.001
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for setting = {&quot;globalValue&quot;:false,&quot;workspaceValue&quot;:false,&quot;workspaceFolderValue&quot;:false}",
    "time": 0
  },
  {
    "name": "Activation - ActivationService Function isJediUsingDefaultConfiguration() Returns false for settings = undefined",
    "time": 0.001
  },
  {
    "name": "Extension survey prompt - shouldShowBanner() Returns false if do not show again is clicked",
    "time": 0
  },
  {
    "name": "Extension survey prompt - shouldShowBanner() Returns false if prompt is disabled for a while",
    "time": 0.001
  },
  {
    "name": "Extension survey prompt - shouldShowBanner() Returns false if user is not in the random sampling",
    "time": 0.027
  },
  {
    "name": "Extension survey prompt - shouldShowBanner() Returns true if user is in the random sampling",
    "time": 0.001
  },
  {
    "name": "Extension survey prompt - shouldShowBanner() Always return true if sample size is 100",
    "time": 0.014
  },
  {
    "name": "Extension survey prompt - shouldShowBanner() Always return false if sample size is 0",
    "time": 0.02
  },
  {
    "name": "Extension survey prompt - showSurvey() Launch survey if &apos;Yes&apos; option is clicked",
    "time": 0.006
  },
  {
    "name": "Extension survey prompt - showSurvey() Do nothing if &apos;Maybe later&apos; option is clicked",
    "time": 0.003
  },
  {
    "name": "Extension survey prompt - showSurvey() Do nothing if no option is clicked",
    "time": 0.002
  },
  {
    "name": "Extension survey prompt - showSurvey() Disable prompt if &apos;Do not show again&apos; option is clicked",
    "time": 0.002
  },
  {
    "name": "Extension survey prompt - activate() No survey is shown if shouldShowBanner() returns false",
    "time": 0.105
  },
  {
    "name": "Extension survey prompt - activate() Survey is shown after waitTimeToShowSurvey if shouldShowBanner() returns true",
    "time": 0.054
  },
  {
    "name": "Language Server - Activator Manager must be started without any workspace",
    "time": 0
  },
  {
    "name": "Language Server - Activator Manager must be disposed",
    "time": 0
  },
  {
    "name": "Language Server - Activator Do not download LS if not required",
    "time": 0
  },
  {
    "name": "Language Server - Activator Do not download LS if not required",
    "time": 0.001
  },
  {
    "name": "Language Server - Activator Start language server after downloading",
    "time": 0.002
  },
  {
    "name": "Language Server - Activator Manager must be started with resource for first available workspace",
    "time": 0
  },
  {
    "name": "Language Server - Activator Manager must be disposed",
    "time": 0
  },
  {
    "name": "Language Server - Activator Download and check if ICU config exists",
    "time": 0
  },
  {
    "name": "Language Server - Activator Download if contents of ICU config is not as expected",
    "time": 0
  },
  {
    "name": "Language Server - Activator JSON file is created to ensure LS can start without ICU",
    "time": 0
  },
  {
    "name": "Language Server - Activator JSON file is not created if it already exists with the right content",
    "time": 0
  },
  {
    "name": "Language Server - Activator JSON file is created if it already exists but with the wrong file content",
    "time": 0
  },
  {
    "name": "Language Server - Analysis Options Initialize will add event handlers and will dispose them when running dispose",
    "time": 0.001
  },
  {
    "name": "Language Server - Analysis Options Changes to settings or interpreter will be debounced",
    "time": 0.012
  },
  {
    "name": "Language Server - Analysis Options If there are no changes then no events will be fired",
    "time": 0.011
  },
  {
    "name": "Language Server - Analysis Options Event must be fired if excluded files are different",
    "time": 0.011
  },
  {
    "name": "Language Server - Analysis Options Event must be fired if typeshed files are different",
    "time": 0.011
  },
  {
    "name": "Language Server - Analysis Options Event must be fired if interpreter info is different",
    "time": 0.01
  },
  {
    "name": "Language Server - Analysis Options Changes to settings will be filtered to current resource",
    "time": 0.039
  },
  {
    "name": "Language Server - Analysis Options Ensure search pattern is not provided when there are no workspaces",
    "time": 0.002
  },
  {
    "name": "Language Server - Analysis Options Ensure search pattern is not provided in single-root workspaces",
    "time": 0.001
  },
  {
    "name": "Language Server - Analysis Options Ensure search pattern is provided in a multi-root workspace",
    "time": 0.001
  },
  {
    "name": "Language Server Download Channel Rules Daily channel should always download  (without an existing Language Server Folder",
    "time": 0.001
  },
  {
    "name": "Language Server Download Channel Rules Stable channel should be download only if folder doesn&apos;t exist  (without an existing Language Server Folder",
    "time": 0
  },
  {
    "name": "Language Server Download Channel Rules Daily channel should always download  (with an existing Language Server Folder",
    "time": 0
  },
  {
    "name": "Language Server Download Channel Rules Stable channel should be download only if folder doesn&apos;t exist  (with an existing Language Server Folder",
    "time": 0
  },
  {
    "name": "Language Server Download Channel Rules Betal channel Should be download only if not checked previously  (without an existing Language Server Folder",
    "time": 0.001
  },
  {
    "name": "Language Server Download Channel Rules Betal channel Should be download only if checked previously  (without an existing Language Server Folder",
    "time": 0.001
  },
  {
    "name": "Language Server Download Channel Rules Betal channel Should be download only if not checked previously  (with an existing Language Server Folder",
    "time": 0
  },
  {
    "name": "Language Server Download Channel Rules Betal channel Should be download only if checked previously  (with an existing Language Server Folder",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Get download info - HTTPS with resource",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Get download info - HTTPS without resource",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Get download info - HTTPS disabled",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Get download info - HTTP",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Get download info - bogus URL",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Test LanguageServerDownloader.downloadFile Downloaded file name must be returned from file downloader and right args passed",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Test LanguageServerDownloader.downloadFile If download succeeds then log completion message",
    "time": 0
  },
  {
    "name": "Activation - Downloader Test LanguageServerDownloader.downloadFile If download fails do not log completion message",
    "time": 0.001
  },
  {
    "name": "Activation - Downloader Test LanguageServerDownloader.downloadLanguageServer Display error message if LS downloading fails",
    "time": 0.003
  },
  {
    "name": "Activation - Downloader Test LanguageServerDownloader.downloadLanguageServer Display error message if LS extraction fails",
    "time": 0.004
  },
  {
    "name": "Language Server - LanguageClient Factory Download factory is used when required to download the LS",
    "time": 0.001
  },
  {
    "name": "Language Server - LanguageClient Factory Simple factory is used when not required to download the LS",
    "time": 0.001
  },
  {
    "name": "Language Server - LanguageClient Factory Download factory will make use of the language server folder name and client will be created",
    "time": 0.026
  },
  {
    "name": "Language Server - LanguageClient Factory Simple factory will make use of the language server folder name and client will be created",
    "time": 0.023
  },
  {
    "name": "Language Server - LanguageServer Loading extension will not throw an error if not activated",
    "time": 0.001
  },
  {
    "name": "Language Server - LanguageServer Loading extension will not throw an error if not activated but after it loads message will be sent",
    "time": 0.124
  },
  {
    "name": "Language Server - LanguageServer Send telemetry when LS has started and disposes appropriately",
    "time": 0.126
  },
  {
    "name": "Language Server - LanguageServer Ensure Errors raised when starting test manager are not bubbled up",
    "time": 0
  },
  {
    "name": "Language Server - LanguageServer Register telemetry handler if LS was downloadeded",
    "time": 0.122
  },
  {
    "name": "Language Server - LanguageServer Do not register telemetry handler if LS was not downloadeded",
    "time": 0.124
  },
  {
    "name": "Language Server Support Not supported if there are errors",
    "time": 0.001
  },
  {
    "name": "Language Server Support Not supported if there are not errors",
    "time": 0.001
  },
  {
    "name": "Language Server Support Support if there are not errors",
    "time": 0.001
  },
  {
    "name": "Language Server - Language Server Extension Must register command handler",
    "time": 0.001
  },
  {
    "name": "Language Server Download Channels Stable",
    "time": 0
  },
  {
    "name": "Language Server Download Channels Beta",
    "time": 0.001
  },
  {
    "name": "Language Server Download Channels Daily",
    "time": 0
  },
  {
    "name": "Language Get Package name for Windows (64bit)",
    "time": 0.001
  },
  {
    "name": "Language Get Package name for Mac (64bit)",
    "time": 0
  },
  {
    "name": "Language Get Package name for Linux (64bit)",
    "time": 0
  },
  {
    "name": "Language Get Package name for Windows (32bit)",
    "time": 0
  },
  {
    "name": "Language Get Package name for Mac (32bit)",
    "time": 0
  },
  {
    "name": "Language Get Package name for Linux (32bit)",
    "time": 0
  },
  {
    "name": "Language Get latest nuget package version",
    "time": 0.002
  },
  {
    "name": "Language Get latest nuget package version (excluding non-release)",
    "time": 0.001
  },
  {
    "name": "Language Ensure minimum version of package is used",
    "time": 0.001
  },
  {
    "name": "Language Server - Manager Start must register handlers and initialize analysis options",
    "time": 0.001
  },
  {
    "name": "Language Server - Manager Attempting to start LS will throw an exception",
    "time": 0.001
  },
  {
    "name": "Language Server - Manager Changes in analysis options must restart LS",
    "time": 0.004
  },
  {
    "name": "Language Server - Manager Changes in analysis options must throttled when restarting LS",
    "time": 0.002
  },
  {
    "name": "Language Server - Manager Multiple changes in analysis options must restart LS twice",
    "time": 0.005
  },
  {
    "name": "Language Server - Manager Must load extension when command was been sent before starting LS",
    "time": 0
  },
  {
    "name": "Language Server - Manager Start must register handlers and initialize analysis options",
    "time": 0
  },
  {
    "name": "Language Server - Manager Attempting to start LS will throw an exception",
    "time": 0.001
  },
  {
    "name": "Language Server - Manager Changes in analysis options must restart LS",
    "time": 0.003
  },
  {
    "name": "Language Server - Manager Changes in analysis options must throttled when restarting LS",
    "time": 0.002
  },
  {
    "name": "Language Server - Manager Multiple changes in analysis options must restart LS twice",
    "time": 0.007
  },
  {
    "name": "Language Server - Manager Must load extension when command was been sent before starting LS",
    "time": 0
  },
  {
    "name": "Language Server Output Channel Create output channel if one does not exist before and return it",
    "time": 0.002
  },
  {
    "name": "Language Server Output Channel Do not create output channel if one already exists",
    "time": 0.001
  },
  {
    "name": "Activation - platform data Name and hash (Windows/Mac)",
    "time": 0.001
  },
  {
    "name": "Activation - platform data Name and hash (Linux)",
    "time": 0.001
  },
  {
    "name": "Activation - platform data Module name",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Activation Service Registry Ensure services are registered",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - ApplicationDiagnostics Register should register source maps",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - ApplicationDiagnostics Performing Pre Startup Health Check must diagnose all validation checks",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - ApplicationDiagnostics Performing Pre Startup Health Check must handles all validation checks only once either in background or foreground",
    "time": 0.004
  },
  {
    "name": "Application Diagnostics - ApplicationDiagnostics Diagnostics Returned by Pre Startup Health Checks must be logged",
    "time": 0.008
  },
  {
    "name": "Application Diagnostics - ApplicationDiagnostics Ensure diagnostics run in foreground and background",
    "time": 0.006
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Can handle EnvPathVariable diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Can not handle non-EnvPathVariable diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should return empty diagnostics for Mac",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should return empty diagnostics for Linux",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should return empty diagnostics for Windows if path variable is valid",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should return single diagnostics for Windows if path contains &apos;&quot;&apos;",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should not return diagnostics for Windows if path ends with delimiter",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should display three options in message displayed with 2 commands",
    "time": 0.004
  },
  {
    "name": "Application Diagnostics - Checks Env Path Variable Should not display a message if the diagnostic code has been ignored",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Can handle all InvalidLaunchJsonDebugger diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Can not handle non-InvalidLaunchJsonDebugger diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Should return empty diagnostics if there are no workspace folders",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Should return empty diagnostics if file launch.json does not exist",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Should return empty diagnostics if file launch.json does not contain strings &quot;pythonExperimental&quot; and &quot;debugStdLib&quot;",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Should return InvalidDebuggerTypeDiagnostic if file launch.json contains string &quot;pythonExperimental&quot;",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Should return JustMyCodeDiagnostic if file launch.json contains string &quot;debugStdLib&quot;",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Should return both diagnostics if file launch.json contains string &quot;debugStdLib&quot; and  &quot;pythonExperimental&quot;",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid All InvalidLaunchJsonDebugger diagnostics should display 2 options to with one command",
    "time": 0.009
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid All InvalidLaunchJsonDebugger diagnostics should display message twice if invoked twice",
    "time": 0.006
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Function fixLaunchJson() returns if there are no workspace folders",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid Function fixLaunchJson() returns if file launch.json does not exist",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals JustMyCodeDiagnostic",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals InvalidDebuggerTypeDiagnostic",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks if launch.json is invalid File launch.json is fixed correctly when code equals ConsoleTypeDiagnostic",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Can handle InvalidPythonPathInDebugger diagnostics",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Can not handle non-InvalidPythonPathInDebugger diagnostics",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Should return empty diagnostics",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerSettings diagnostic should display one option to with a command",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerSettings diagnostic should display message once if invoked twice",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerSettings diagnostic should display message twice if invoked twice",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger InvalidPythonPathInDebuggerLaunch diagnostic should display one option to with a command",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure we get python path from config when path = ${config:python.pythonPath}",
    "time": 0.445
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure ${workspaceFolder} is not expanded when a resource is not passed",
    "time": 0.416
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure ${workspaceFolder} is expanded",
    "time": 0.398
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure ${env:XYZ123} is expanded",
    "time": 0.401
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure we get python path from config when path = undefined",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure we do not get python path from config when path is provided",
    "time": 0.416
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure InvalidPythonPathInDebuggerLaunch diagnostic is handled when path is invalid in launch.json",
    "time": 0.407
  },
  {
    "name": "Application Diagnostics - Checks Python Path in debugger Ensure InvalidPythonPathInDebuggerSettings diagnostic is handled when path is invalid in settings.json",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks LS not supported Should display two options in message displayed with 2 commands",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks LS not supported Should not display a message if the diagnostic code has been ignored",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks LS not supported LSNotSupportedDiagnosticService can handle LSNotSupported diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks LS not supported LSNotSupportedDiagnosticService can not handle non-LSNotSupported diagnostics",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Can handle InvalidPythonPathInterpreter diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Can not handle non-InvalidPythonPathInterpreter diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if not a Mac",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if installer check is disabled",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if there are interpreters, one is selected, and platform is not mac",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if there are interpreters, platform is mac and selected interpreter is not default mac interpreter",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return diagnostic if there are no other interpreters, platform is mac and selected interpreter is default mac interpreter",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return diagnostic if there are other interpreters, platform is mac and selected interpreter is default mac interpreter",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Handling no interpreters diagnostic should return select interpreter cmd",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Handling no interpreters diagnostisc should return 3 commands",
    "time": 0.003
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should not display a message if No Interpreters diagnostic has been ignored",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Change Handlers. Add PythonPath handler is invoked",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Change Handlers. Event Handler is registered and invoked",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Change Handlers. Event Handler is registered and not invoked",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Change Handlers. Diagnostics are checked when path changes",
    "time": 0.204
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Change Handlers. Diagnostics are checked and throttled when path changes",
    "time": 0.502
  },
  {
    "name": "Application Diagnostics - PowerShell Activation Can handle PowerShell diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - PowerShell Activation Can not handle non-EnvPathVariable diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - PowerShell Activation Must return empty diagnostics",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PowerShell Activation Should display three options in message displayed with 4 commands",
    "time": 0.003
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Can handle InvalidPythonPathInterpreter diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Can not handle non-InvalidPythonPathInterpreter diagnostics",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return empty diagnostics if installer check is disabled",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Should return diagnostics if there are no interpreters",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Handling no interpreters diagnostic should return download link",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Handling no currently selected interpreter diagnostic should show select interpreter message",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Checks Python Interpreter Diagnostics Handling no interpreters diagnostic should return select interpreter cmd",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings (with a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings and ignores errors raised by UpdateTestSettings (with a resource)",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings When there are no workspaces, then return just the user settings file (with a resource)",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Check Test Settings When there are no workspaces &amp; no user file, then return an empty array (with a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings When there is a workspace folder, then return the user settings file &amp; workspace file (with a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings When there is a workspace folder &amp; no user file, then workspace file (with a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Return an empty array if there are no files (with a resource)",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings Filter files based on whether they need to be fixed (with a resource)",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings (without a resource)",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings activate method invokes UpdateTestSettings and ignores errors raised by UpdateTestSettings (without a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings When there are no workspaces, then return just the user settings file (without a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings When there are no workspaces &amp; no user file, then return an empty array (without a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Return an empty array if there are no files (without a resource)",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Filter files based on whether they need to be fixed (without a resource)",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should fix file if contents contains python.unitTest.",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should fix file if contents contains python.pyTest.",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should fix file if contents contains python.pyTest. &amp; python.unitTest.",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should not fix file if contents does not contain python.unitTest. and python.pyTest",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings File should not be fixed if there&apos;s an error in reading the file",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should replace python.unitTest.",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should replace python.unitTest.pyTest.",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should replace python.testing.pyTest.",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Check Test Settings Should not make any changes to the file",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Exec VSC Commands Test creation of VSC Command",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Exec VSC Commands Test execution of VSC Command",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Commands Factory Test creation of Ignore Command",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Commands Factory Test creation of Launch Browser Command",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Commands Ignore Invoking Command should invoke the filter Service",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - Commands Launch Browser Invoking Command should launch the browser",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter ignoreDiagnostic must save codes in Global Persistent State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;false&apos; when code does not exist in any State",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in Global State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in any State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter ignoreDiagnostic must append codes in Global Persistent State",
    "time": 0
  },
  {
    "name": "Application Diagnostics - Filter ignoreDiagnostic must save codes in Workspace Persistent State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;false&apos; when code does not exist in any State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in Workspace State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter shouldIgnoreDiagnostic should return &apos;true&apos; when code exist in any State",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Filter ignoreDiagnostic must append codes in Workspace Persistent State",
    "time": 0.002
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should display a message without any buttons",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should display a custom message with buttons",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Error&apos; should display a custom message with buttons and invoke selected command",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should display a message without any buttons",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should display a custom message with buttons",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Warning&apos; should display a custom message with buttons and invoke selected command",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should display a message without any buttons",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should display a custom message with buttons",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Information&apos; should display a custom message with buttons and invoke selected command",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should display a message without any buttons",
    "time": 0
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should display a custom message with buttons",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - PromptHandler Handling a diagnositic of severity &apos;Hint&apos; should display a custom message with buttons and invoke selected command",
    "time": 0.001
  },
  {
    "name": "Application Diagnostics - Register classes in IOC Container Register Classes",
    "time": 0
  },
  {
    "name": "Diagnostisc - Source Maps Command is registered",
    "time": 0
  },
  {
    "name": "Diagnostisc - Source Maps Setting is turned on and vsc reloaded",
    "time": 0
  },
  {
    "name": "Diagnostisc - Source Maps Display prompt and do not enable",
    "time": 0.001
  },
  {
    "name": "Diagnostisc - Source Maps Display prompt and must enable",
    "time": 0.001
  },
  {
    "name": "Python Settings - pythonPath Python Path from settings.json is used",
    "time": 0.463
  },
  {
    "name": "Python Settings - pythonPath Python Path from settings.json is used and relative path starting with &apos;~&apos; will be resolved from home directory",
    "time": 0.419
  },
  {
    "name": "Python Settings - pythonPath Python Path from settings.json is used and relative path starting with &apos;.&apos; will be resolved from workspace folder",
    "time": 0.419
  },
  {
    "name": "Python Settings - pythonPath Python Path from settings.json is used and ${workspacecFolder} value will be resolved from workspace folder",
    "time": 0.414
  },
  {
    "name": "Python Settings - pythonPath If we don&apos;t have a custom python path and no auto selected interpreters, then use default",
    "time": 0.401
  },
  {
    "name": "Python Settings - pythonPath If we don&apos;t have a custom python path and we do have an auto selected interpreter, then use it",
    "time": 0.451
  },
  {
    "name": "Python Settings condaPath updated",
    "time": 0.396
  },
  {
    "name": "Python Settings condaPath (relative to home) updated",
    "time": 0.408
  },
  {
    "name": "Python Settings Formatter Paths and args",
    "time": 0.405
  },
  {
    "name": "Python Settings Formatter Paths (paths relative to home)",
    "time": 0.413
  },
  {
    "name": "Python Settings String settings pythonPath updated",
    "time": 0.412
  },
  {
    "name": "Python Settings String settings venvPath updated",
    "time": 0.397
  },
  {
    "name": "Python Settings String settings condaPath updated",
    "time": 0.397
  },
  {
    "name": "Python Settings String settings pipenvPath updated",
    "time": 0.378
  },
  {
    "name": "Python Settings String settings envFile updated",
    "time": 0.401
  },
  {
    "name": "Python Settings String settings poetryPath updated",
    "time": 0.397
  },
  {
    "name": "Python Settings String settings insidersChannel updated",
    "time": 0.402
  },
  {
    "name": "Python Settings String settings runMagicCommands updated",
    "time": 0.404
  },
  {
    "name": "Python Settings Boolean settings downloadLanguageServer updated",
    "time": 0.4
  },
  {
    "name": "Python Settings Boolean settings jediEnabled updated",
    "time": 0.405
  },
  {
    "name": "Python Settings Boolean settings autoUpdateLanguageServer updated",
    "time": 0.404
  },
  {
    "name": "Python Settings Boolean settings globalModuleInstallation updated",
    "time": 0.384
  },
  {
    "name": "Python Settings Number settings jediMemoryLimit updated",
    "time": 0.416
  },
  {
    "name": "Crypto Utils If hashFormat equals `number`, method createHash() returns a number",
    "time": 0.001
  },
  {
    "name": "Crypto Utils If hashFormat equals `string`, method createHash() returns a string",
    "time": 0.001
  },
  {
    "name": "Crypto Utils If hashFormat equals `number`, the hash should not be NaN",
    "time": 0
  },
  {
    "name": "Crypto Utils If hashFormat equals `string`, the hash should not be undefined",
    "time": 0
  },
  {
    "name": "Crypto Utils If hashFormat equals `number`, hashes with different data should return different number hashes",
    "time": 0
  },
  {
    "name": "Crypto Utils If hashFormat equals `string`, hashes with different data should return different string hashes",
    "time": 0
  },
  {
    "name": "DOT.NET Test Unknown support = true",
    "time": 0.001
  },
  {
    "name": "DOT.NET Test Unknown support = false",
    "time": 0
  },
  {
    "name": "DOT.NET Test Windows support = true",
    "time": 0
  },
  {
    "name": "DOT.NET Test Windows support = false",
    "time": 0
  },
  {
    "name": "DOT.NET Test OSX support = true",
    "time": 0.001
  },
  {
    "name": "DOT.NET Test OSX support = false",
    "time": 0
  },
  {
    "name": "DOT.NET Test Linux support = true",
    "time": 0
  },
  {
    "name": "DOT.NET Test Linux support = false",
    "time": 0
  },
  {
    "name": "Common Dotnet Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "DOT.NET Linux Linux 64 bit is supported",
    "time": 0
  },
  {
    "name": "DOT.NET Linux Linux 64 bit is not supported",
    "time": 0
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0.001
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0.001
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0.001
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0
  },
  {
    "name": "DOT.NET Mac Supported on 16.0.0",
    "time": 0.001
  },
  {
    "name": "DOT.NET Unknown Not supported",
    "time": 0
  },
  {
    "name": "DOT.NET Windows Windows is Supported",
    "time": 0
  },
  {
    "name": "xA/B experiments Initializing experiments does not download experiments if storage is valid and contains experiments",
    "time": 0
  },
  {
    "name": "xA/B experiments If storage has expired, initializing experiments downloads the experiments, but does not store them if they are invalid or incomplete",
    "time": 0.001
  },
  {
    "name": "xA/B experiments If storage has expired, initializing experiments downloads the experiments, and stores them if they are valid",
    "time": 0.001
  },
  {
    "name": "xA/B experiments If downloading experiments fails with error, the storage is left as it is",
    "time": 0.001
  },
  {
    "name": "xA/B experiments If the users have opted out of telemetry, then they are opted out of AB testing",
    "time": 0
  },
  {
    "name": "xA/B experiments Ensure experiments can only be activated once",
    "time": 0.001
  },
  {
    "name": "xA/B experiments Ensure experiments are reliably downloaded in the background",
    "time": 0.006
  },
  {
    "name": "xA/B experiments Ensure experiment storage is updated to contain the latest downloaded experiments",
    "time": 0.001
  },
  {
    "name": "xA/B experiments When latest experiments are not available, but experiment storage contains experiments, then experiment storage is not updated",
    "time": 0.002
  },
  {
    "name": "xA/B experiments When best effort to populate experiments succeeds, function updateStorage() returns",
    "time": 0.001
  },
  {
    "name": "xA/B experiments When latest experiments are not available, experiment storage is empty, but if local experiments file is not valid, experiment storage is not updated",
    "time": 0.003
  },
  {
    "name": "xA/B experiments When latest experiments are not available, and experiment storage is empty, then experiment storage is updated using local experiments file given experiments are valid",
    "time": 0.002
  },
  {
    "name": "xA/B experiments If experiment&apos;s name is not in user experiment list, user is not in experiment",
    "time": 0
  },
  {
    "name": "xA/B experiments If experiment&apos;s name is in user experiment list and hash modulo output is in range, user is in experiment",
    "time": 0.001
  },
  {
    "name": "xA/B experiments User experiments list is empty if experiment storage value is not an array",
    "time": 0
  },
  {
    "name": "xA/B experiments User experiments list is empty if experiment storage value is an empty array",
    "time": 0
  },
  {
    "name": "xA/B experiments User experiments list contains the experiment if and only if user is in experiment range",
    "time": 0.001
  },
  {
    "name": "xA/B experiments If storage as parameter is passed in as argument to function downloadAndStoreExperiments(), download experiments into that storage",
    "time": 0
  },
  {
    "name": "xA/B experiments When latest experiments are not available, and experiment storage is empty, then function updateExperimentStorage() stops execution and returns If checking the existence of config file fails",
    "time": 0.001
  },
  {
    "name": "xA/B experiments When latest experiments are not available, and experiment storage is empty, then function updateExperimentStorage() stops execution and returns If reading config file fails",
    "time": 0.001
  },
  {
    "name": "xA/B experiments When latest experiments are not available, and experiment storage is empty, then function updateExperimentStorage() stops execution and returns If config file does not exist",
    "time": 0.001
  },
  {
    "name": "xA/B experiments When latest experiments are not available, and experiment storage is empty, then function updateExperimentStorage() stops execution and returns If parsing file or updating storage fails",
    "time": 0.001
  },
  {
    "name": "xA/B experiments Function IsUserInRange() Returns true if hash modulo output is in range",
    "time": 0
  },
  {
    "name": "xA/B experiments Function IsUserInRange() Returns false if hash modulo is less than min",
    "time": 0
  },
  {
    "name": "xA/B experiments Function IsUserInRange() Returns false if hash modulo is more than max",
    "time": 0
  },
  {
    "name": "xA/B experiments Function IsUserInRange() If checking if user is in range fails with error, throw error",
    "time": 0.001
  },
  {
    "name": "xA/B experiments Function IsUserInRange() If machine ID is bogus, throw error",
    "time": 0.001
  },
  {
    "name": "xA/B experiments Function areExperimentsValid() If experiments are not an array, return false",
    "time": 0
  },
  {
    "name": "xA/B experiments Function areExperimentsValid() If any experiment have `min` field missing, return false",
    "time": 0
  },
  {
    "name": "xA/B experiments Function areExperimentsValid() If any experiment have `max` field missing, return false",
    "time": 0
  },
  {
    "name": "xA/B experiments Function areExperimentsValid() If any experiment have `salt` field missing, return false",
    "time": 0
  },
  {
    "name": "xA/B experiments Function areExperimentsValid() If any experiment have `name` field missing, return false",
    "time": 0
  },
  {
    "name": "xA/B experiments Function areExperimentsValid() If all experiments contain all the fields in type `ABExperiment`, return true",
    "time": 0
  },
  {
    "name": "xA/B experiments Function doBestEffortToPopulateExperiments() If attempt to download experiments within timeout suceeds, return true",
    "time": 0.051
  },
  {
    "name": "xA/B experiments Function doBestEffortToPopulateExperiments() If downloading experiments fails to complete within timeout, return false",
    "time": 0.102
  },
  {
    "name": "xA/B experiments Function doBestEffortToPopulateExperiments() If downloading experiments fails with error, return false",
    "time": 0.001
  },
  {
    "name": "String Extensions Should return empty string for empty arg",
    "time": 0.001
  },
  {
    "name": "String Extensions Should quote an empty space",
    "time": 0
  },
  {
    "name": "String Extensions Should not quote command arguments without spaces",
    "time": 0
  },
  {
    "name": "String Extensions Should quote command arguments with spaces",
    "time": 0
  },
  {
    "name": "String Extensions Should return empty string for empty path",
    "time": 0
  },
  {
    "name": "String Extensions Should not quote file argument without spaces",
    "time": 0
  },
  {
    "name": "String Extensions Should quote file argument with spaces",
    "time": 0
  },
  {
    "name": "String Extensions Should replace all back slashes with forward slashes (irrespective of OS)",
    "time": 0
  },
  {
    "name": "String Extensions Should replace all back slashes with forward slashes (irrespective of OS) and quoted when file has spaces",
    "time": 0
  },
  {
    "name": "String Extensions Should replace all back slashes with forward slashes (irrespective of OS) and quoted when file has spaces",
    "time": 0
  },
  {
    "name": "String Extensions Should leave string unchanged",
    "time": 0
  },
  {
    "name": "String Extensions String should be formatted to contain first argument",
    "time": 0
  },
  {
    "name": "String Extensions String should be formatted to contain first argument even with too many args",
    "time": 0
  },
  {
    "name": "String Extensions String should be formatted to contain second argument",
    "time": 0
  },
  {
    "name": "String Extensions String should be formatted to contain second argument even with too many args",
    "time": 0
  },
  {
    "name": "String Extensions String should be formatted with multiple args",
    "time": 0
  },
  {
    "name": "String Extensions String should remove quotes",
    "time": 0
  },
  {
    "name": "Feature Deprecation Manager Tests Ensure deprecated command Build_Workspace_Symbols registers its popup",
    "time": 0.002
  },
  {
    "name": "Feature Deprecation Manager Tests Ensure setting is checked",
    "time": 0.003
  },
  {
    "name": "Download channel rules - ExtensionInsidersOffChannelRule Never look for insiders build",
    "time": 0.001
  },
  {
    "name": "Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is new, update look up time and return installer for insiders build",
    "time": 0.001
  },
  {
    "name": "Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders the first time",
    "time": 0.001
  },
  {
    "name": "Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders after 24 hrs of last lookup time",
    "time": 0
  },
  {
    "name": "Download channel rules - ExtensionInsidersDailyChannelRule If insiders channel rule is not new Do not update look up time or return any installer if looking for insiders within 24 hrs of last lookup time",
    "time": 0
  },
  {
    "name": "Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is new, update look up time and return installer for insiders build",
    "time": 0.001
  },
  {
    "name": "Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders the first time",
    "time": 0.001
  },
  {
    "name": "Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is not new Update look up time and return installer for insiders build if looking for insiders after a week of last lookup time",
    "time": 0.001
  },
  {
    "name": "Download channel rules - ExtensionInsidersWeeklyChannelRule If insiders channel rule is not new Do not update look up time or return any installer if looking for insiders within one week of last lookup time",
    "time": 0
  },
  {
    "name": "Download channel service Get channel returns &apos;off&apos; if settings value is set to &apos;off&apos;",
    "time": 0
  },
  {
    "name": "Download channel service Get channel returns &apos;weekly&apos; if settings value is set to &apos;weekly&apos;",
    "time": 0
  },
  {
    "name": "Download channel service Get channel returns &apos;daily&apos; if settings value is set to &apos;daily&apos;",
    "time": 0
  },
  {
    "name": "Download channel service Function isChannelUsingDefaultConfiguration() returns false if setting is set",
    "time": 0
  },
  {
    "name": "Download channel service Function isChannelUsingDefaultConfiguration() returns true if setting is not set",
    "time": 0
  },
  {
    "name": "Download channel service Function isChannelUsingDefaultConfiguration() throws error if not setting is found",
    "time": 0.001
  },
  {
    "name": "Download channel service Update channel updates configuration settings",
    "time": 0
  },
  {
    "name": "Download channel service Update channel throws error when updates configuration settings fails",
    "time": 0
  },
  {
    "name": "Download channel service If insidersChannelSetting is changed, an event is fired",
    "time": 0
  },
  {
    "name": "Download channel service If some other setting changed, no event is fired",
    "time": 0
  },
  {
    "name": "Download channel service Ensure on channel change captures the fired event with the correct arguments",
    "time": 0
  },
  {
    "name": "Insiders Extension prompt Channel is set to &apos;daily&apos; if &apos;Yes, daily&apos; option is selected",
    "time": 0.003
  },
  {
    "name": "Insiders Extension prompt Channel is set to &apos;weekly&apos; if &apos;Yes, weekly&apos; option is selected",
    "time": 0.002
  },
  {
    "name": "Insiders Extension prompt No channel is set if &apos;No, thanks&apos; option is selected",
    "time": 0.002
  },
  {
    "name": "Insiders Extension prompt No channel is set if no option is selected",
    "time": 0.002
  },
  {
    "name": "Insiders Extension prompt Do not do anything if no option is selected in the reload prompt",
    "time": 0.002
  },
  {
    "name": "Insiders Extension prompt Reload windows if &apos;Reload&apos; option is selected in the reload prompt",
    "time": 0.002
  },
  {
    "name": "Insiders Extension Service - Handle channel If insiders is not be installed, handling channel does not do anything and simply returns",
    "time": 0.001
  },
  {
    "name": "Insiders Extension Service - Handle channel If insiders is required to be installed, handling channel installs the build and prompts user",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Activation Execution goes as expected if there are no errors",
    "time": 0.001
  },
  {
    "name": "Insiders Extension Service - Activation Ensure channels are reliably handled in the background",
    "time": 0.004
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() Set channel to off is displayed when vscode channel = &apos;stable&apos;, extension channel = &apos;stable&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = undefined",
    "time": 0.001
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() No prompt is displayed when vscode channel = &apos;stable&apos;, extension channel = &apos;insiders&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = undefined",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() No prompt is displayed when vscode channel = &apos;stable&apos;, extension channel = &apos;undefined&apos;, install channel = &apos;off&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = undefined",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() No prompt is displayed when vscode channel = &apos;insiders&apos;, extension channel = &apos;undefined&apos;, install channel = &apos;off&apos;, user has already been notified to install insiders, isChannelUsingDefaultConfiguration = undefined",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() No prompt is displayed when vscode channel = &apos;insiders&apos;, extension channel = &apos;undefined&apos;, install channel = &apos;off&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = false",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() Insiders Install Prompt is displayed when vscode channel = &apos;insiders&apos;, extension channel = &apos;undefined&apos;, install channel = &apos;undefined&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = true",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function handleEdgeCases() Insiders Install Prompt is displayed when vscode channel = &apos;insiders&apos;, extension channel = &apos;stable&apos;, install channel = &apos;daily&apos;, user has not been notified to install insiders, isChannelUsingDefaultConfiguration = true",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function registerCommandsAndHandlers() Ensure commands and handlers get registered, and disposables returned are in the disposable list",
    "time": 0
  },
  {
    "name": "Insiders Extension Service - Function registerCommandsAndHandlers() Ensure commands and handlers get registered with the correct callback handlers",
    "time": 0.001
  },
  {
    "name": "Common - Conda Installer Name and priority",
    "time": 0
  },
  {
    "name": "Common - Conda Installer Installer is not supported when conda is not available",
    "time": 0
  },
  {
    "name": "Common - Conda Installer Installer is not supported when current env is not a conda env",
    "time": 0.001
  },
  {
    "name": "Common - Conda Installer Installer is supported when current env is a conda env",
    "time": 0.001
  },
  {
    "name": "Extension build installer - Stable build installer Installing stable build logs progress and installs stable",
    "time": 0.002
  },
  {
    "name": "Extension build installer - Insiders build installer Installing Insiders build downloads and installs Insiders",
    "time": 0.003
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pytest (without a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed nosetest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed flake8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pylama (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed prospector (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pydocstyle (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed yapf (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed autopep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed mypy (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed black (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed bandit (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pytest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed nosetest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed flake8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pylama (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed prospector (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pydocstyle (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed yapf (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed autopep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed mypy (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed black (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed bandit (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed nosetest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pylint (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed flake8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pylama (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed prospector (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed yapf (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed autopep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed mypy (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed black (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is not displayed bandit (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed nosetest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pylint (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed flake8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pylama (With a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed prospector (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed yapf (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed autopep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed mypy (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed black (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer - Invalid Paths Ensure invalid path message is displayed bandit (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pytest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pytest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pytest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pytest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, nosetest (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, nosetest (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer nosetest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) nosetest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pylint (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the install prompt is not displayed when the user requests it not be shown again, pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, flake8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, flake8 (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, flake8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer flake8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) flake8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, pep8 (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pep8 (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pylama (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pylama (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, pylama (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pylama (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pylama (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, prospector (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, prospector (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, prospector (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer prospector (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) prospector (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pydocstyle (without a resource)",
    "time": 0.003
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pydocstyle (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, pydocstyle (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pydocstyle (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pydocstyle (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, yapf (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, yapf (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer yapf (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) yapf (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, autopep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, autopep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer autopep8 (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) autopep8 (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, mypy (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, mypy (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, mypy (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer mypy (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) mypy (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer unittest (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer  (created using ProductInstaller) unittest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, rope (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, rope (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer rope (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) rope (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, black (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, black (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer black (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) black (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, bandit (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, bandit (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, bandit (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer bandit (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) bandit (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, jupyter (without a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, jupyter (without a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer jupyter (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) jupyter (without a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, nosetest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, nosetest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer nosetest (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) nosetest (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pylint (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pylint (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the install prompt is not displayed when the user requests it not be shown again, pylint (With a resource)",
    "time": 0.004
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pylint (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pylint (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, flake8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, flake8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, flake8 (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer flake8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) flake8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pep8 (With a resource)",
    "time": 0.003
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, pep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pep8 (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pylama (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pylama (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, pylama (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pylama (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pylama (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, prospector (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, prospector (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, prospector (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer prospector (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) prospector (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, yapf (With a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, yapf (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer yapf (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) yapf (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, autopep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, autopep8 (With a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer autopep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) autopep8 (With a resource)",
    "time": 0.004
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, mypy (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, mypy (With a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, mypy (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer mypy (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) mypy (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer unittest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer  (created using ProductInstaller) unittest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, rope (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, rope (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer rope (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) rope (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, black (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, black (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer black (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) black (With a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, bandit (With a resource)",
    "time": 0.002
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, bandit (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the &apos;do not show again&apos; prompt isn&apos;t shown for non-pylint linters, bandit (With a resource)",
    "time": 0
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer bandit (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) bandit (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed only once, until the prompt is closed, jupyter (With a resource)",
    "time": 0.004
  },
  {
    "name": "Module Installer only Ensure the prompt is displayed again when previous prompt has been closed, jupyter (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer jupyter (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Ensure resource info is passed into the module installer (created using ProductInstaller) jupyter (With a resource)",
    "time": 0.001
  },
  {
    "name": "Module Installer only Test LinterInstaller.promptToInstallImplementation Ensure 3 options for pylint",
    "time": 0
  },
  {
    "name": "Module Installer only Test LinterInstaller.promptToInstallImplementation Ensure select linter command is invoked",
    "time": 0.001
  },
  {
    "name": "Module Installer only Test LinterInstaller.promptToInstallImplementation Ensure 3 options for pylint",
    "time": 0
  },
  {
    "name": "Module Installer only Test LinterInstaller.promptToInstallImplementation Ensure select linter command is invoked",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pytest)",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pep8)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pydocstyle)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (yapf)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (mypy)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (unittest)",
    "time": 0.004
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (jupyter)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (nosetest)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (rope)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (nosetest)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (nosetest)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (pydocstyle)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (rope)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (bandit)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda) Test args (jupyter)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)",
    "time": 0.005
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (nosetest)",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.005
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (rope)",
    "time": 0.007
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)",
    "time": 0.006
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (nosetest)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.005
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pylama)",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (prospector)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (pydocstyle)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (rope)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (bandit)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, without conda name) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.003
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (prospector)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (autopep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (unittest)",
    "time": 0.002
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer CondaInstaller (without proxy info, with conda path) Test args (jupyter)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nosetest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pep8)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pylama)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (prospector)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (black)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (jupyter)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nosetest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (nosetest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (flake8)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)",
    "time": 0.005
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (yapf)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (autopep8)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (unittest)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (bandit)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (without proxy info, without conda) Test Args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pytest)",
    "time": 0.005
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (nosetest)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.004
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.004
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (flake8)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pep8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (prospector)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pydocstyle)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (unittest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (rope)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (rope)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (black)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (jupyter)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pytest)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (nosetest)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (flake8)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (flake8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pylama)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (pydocstyle)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (pydocstyle)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (yapf)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (mypy)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (rope)",
    "time": 0
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (rope)",
    "time": 0.004
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (bandit)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Ensure getActiveInterpreter is used in PipInstaller (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipInstaller (with proxy info, without conda) Test Args (jupyter)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (nosetest)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.009
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (flake8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pylama)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pydocstyle)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (yapf)",
    "time": 0
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (autopep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (mypy)",
    "time": 0.003
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (unittest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (bandit)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (jupyter)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pytest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (nosetest)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&lt;2.0.0&apos; in 2.7.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.4.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.5.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.6.0-final",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Ensure install arg is &apos;pylint&apos; in 3.7.0-final",
    "time": 0.002
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (flake8)",
    "time": 0.002
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pep8)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pylama)",
    "time": 0
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (prospector)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (pydocstyle)",
    "time": 0
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (yapf)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (autopep8)",
    "time": 0
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (mypy)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (unittest)",
    "time": 0
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (rope)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (black)",
    "time": 0.001
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (bandit)",
    "time": 0
  },
  {
    "name": "Module Installer PipEnvInstaller (without proxy info, without conda) Test args (jupyter)",
    "time": 0
  },
  {
    "name": "Module Installer - Poetry Is not supported when there is no resource",
    "time": 0.001
  },
  {
    "name": "Module Installer - Poetry Is not supported when there is no workspace",
    "time": 0
  },
  {
    "name": "Module Installer - Poetry Is not supported when the poetry file does not exists",
    "time": 0
  },
  {
    "name": "Module Installer - Poetry Is not supported when the poetry is not available (with stderr)",
    "time": 0.002
  },
  {
    "name": "Module Installer - Poetry Is not supported when the poetry is not available (with error running poetry)",
    "time": 0.003
  },
  {
    "name": "Module Installer - Poetry Is supported",
    "time": 0.003
  },
  {
    "name": "Module Installer - Poetry Get Executable info",
    "time": 0.001
  },
  {
    "name": "Module Installer - Poetry Get executable info when installing black",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for pytest (without a resource)",
    "time": 0.002
  },
  {
    "name": "Product Path Ensure module name is returned for pytest (without a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for nosetest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure module name is returned for nosetest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for pylint (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for flake8 (without a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for pep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for pylama (without a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for prospector (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for pydocstyle (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for yapf (without a resource)",
    "time": 0.002
  },
  {
    "name": "Product Path Ensure path is returned for autopep8 (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for mypy (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for unittest (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure module name is returned for unittest (without a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for ctags (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for rope (without a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for black (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for bandit (without a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for jupyter (without a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure module name is returned for pytest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for nosetest (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure module name is returned for nosetest (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for pylint (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for flake8 (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for pep8 (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for pylama (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for prospector (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for pydocstyle (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for yapf (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for autopep8 (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for mypy (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for unittest (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure module name is returned for unittest (With a resource)",
    "time": 0.002
  },
  {
    "name": "Product Path Ensure path is returned for ctags (With a resource)",
    "time": 0.001
  },
  {
    "name": "Product Path Ensure path is returned for rope (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for black (With a resource)",
    "time": 0.002
  },
  {
    "name": "Product Path Ensure path is returned for bandit (With a resource)",
    "time": 0
  },
  {
    "name": "Product Path Ensure path is returned for jupyter (With a resource)",
    "time": 0
  },
  {
    "name": "Common installer Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "File Downloader File Downloader (real) File gets downloaded",
    "time": 0.024
  },
  {
    "name": "File Downloader File Downloader (real) Error is throw for http Status !== 200",
    "time": 0.004
  },
  {
    "name": "File Downloader File Downloader (real) Error is throw if unable to write to the file stream",
    "time": 0.003
  },
  {
    "name": "File Downloader File Downloader (real) Error is throw if file stream throws an error",
    "time": 0.007
  },
  {
    "name": "File Downloader File Downloader (real) Report progress as file gets downloaded",
    "time": 0.065
  },
  {
    "name": "File Downloader File Downloader (mocks) Create temporary file and return path to that file",
    "time": 0
  },
  {
    "name": "File Downloader File Downloader (mocks) Display progress message in output channel",
    "time": 0.001
  },
  {
    "name": "File Downloader File Downloader (mocks) Display progress when downloading",
    "time": 0.001
  },
  {
    "name": "File Downloader File Downloader (mocks) Dispose temp file and bubble error thrown by status progress",
    "time": 0.001
  },
  {
    "name": "Http Client Get proxy info",
    "time": 0.001
  },
  {
    "name": "Http Client Test getJSON() Throw error if request returns with download error",
    "time": 0.021
  },
  {
    "name": "Http Client Test getJSON() Throw error if request does not return with status code 200",
    "time": 0.029
  },
  {
    "name": "Http Client Test getJSON() If strict is set to true, and parsing fails, throw error",
    "time": 0.018
  },
  {
    "name": "Http Client Test getJSON() If strict is set to false, and jsonc parsing returns error codes, then log errors and don&apos;t throw, return json",
    "time": 0.017
  },
  {
    "name": "Http Client Test getJSON() Return expected json if strict is set to true and parsing is successful",
    "time": 0.02
  },
  {
    "name": "Http Client Test getJSON() Return expected json if strict is set to false and parsing is successful",
    "time": 0.017
  },
  {
    "name": "Nuget Azure Storage Repository Get all packages (&quot;https://az&quot; / true)",
    "time": 0.002
  },
  {
    "name": "Nuget Azure Storage Repository Get all packages (&quot;https://az&quot; / false)",
    "time": 0.001
  },
  {
    "name": "Nuget Azure Storage Repository Get all packages (&quot;http://az&quot; / true)",
    "time": 0.001
  },
  {
    "name": "Nuget Azure Storage Repository Get all packages (&quot;http://az&quot; / false)",
    "time": 0.001
  },
  {
    "name": "Nuget on Nuget Repo Get all package versions",
    "time": 0.001
  },
  {
    "name": "Nuget on Nuget Repo Get package uri",
    "time": 0
  },
  {
    "name": "Nuget on Nuget Repo Get packages",
    "time": 0.001
  },
  {
    "name": "Nuget Service Identifying release versions",
    "time": 0
  },
  {
    "name": "Nuget Service Get package version",
    "time": 0.001
  },
  {
    "name": "FileSystem ReadFile returns contents of a file",
    "time": 0.004
  },
  {
    "name": "FileSystem ReadFile throws an exception if file does not exist",
    "time": 0.001
  },
  {
    "name": "FileSystem Case sensitivity is ignored when comparing file names on windows",
    "time": 0.001
  },
  {
    "name": "FileSystem Case sensitivity is not ignored when comparing file names on osx",
    "time": 0
  },
  {
    "name": "FileSystem Case sensitivity is not ignored when comparing file names on linux",
    "time": 0
  },
  {
    "name": "FileSystem Check existence of files synchronously",
    "time": 0.001
  },
  {
    "name": "FileSystem Test appending to file",
    "time": 0.003
  },
  {
    "name": "FileSystem Test searching for files",
    "time": 0.004
  },
  {
    "name": "FileSystem Ensure creating a temporary file results in a unique temp file path",
    "time": 0.002
  },
  {
    "name": "FileSystem Ensure writing to a temp file is supported via file stream",
    "time": 0.001
  },
  {
    "name": "FileSystem Ensure chmod works against a temporary file",
    "time": 0.002
  },
  {
    "name": "FileSystem Getting hash for non existent file should throw error",
    "time": 0.001
  },
  {
    "name": "FileSystem Getting hash for a file should return non-empty string",
    "time": 0.001
  },
  {
    "name": "Common Platform Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "ProcessLogger suite Logger displays the process command, arguments and current working directory in the output channel",
    "time": 0.002
  },
  {
    "name": "ProcessLogger suite Logger adds quotes around arguments if they contain spaces",
    "time": 0
  },
  {
    "name": "ProcessLogger suite Logger preserves quotes around arguments if they contain spaces",
    "time": 0
  },
  {
    "name": "ProcessLogger suite Logger replaces the path/to/home with ~ in the current working directory",
    "time": 0.001
  },
  {
    "name": "ProcessLogger suite Logger replaces the path/to/home with ~ in the command path",
    "time": 0
  },
  {
    "name": "ProcessLogger suite Logger doesn&apos;t display the working directory line if there is no options parameter",
    "time": 0
  },
  {
    "name": "ProcessLogger suite Logger doesn&apos;t display the working directory line if there is no cwd key in the options parameter",
    "time": 0.001
  },
  {
    "name": "Process - Process Service Process is killed",
    "time": 1.568
  },
  {
    "name": "Process - Process Service Process is alive",
    "time": 0.704
  },
  {
    "name": "Process - ProcessServiceFactory Ensure ProcessService is created with an existing resource",
    "time": 0.001
  },
  {
    "name": "Process - ProcessServiceFactory Ensure ProcessService is created with an undefined resource",
    "time": 0
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource Ensure PythonExecutionService is created",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource Ensure we use an existing `create` method if there are no environment variables for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource PythonExecutionService is created",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource and an interpreter Ensure PythonExecutionService is created",
    "time": 0.002
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory Without a resource and an interpreter PythonExecutionService is created",
    "time": 0.002
  },
  {
    "name": "Process - PythonExecutionFactory With a resource Ensure PythonExecutionService is created",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory With a resource Ensure we use an existing `create` method if there are no environment variables for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory With a resource Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory With a resource PythonExecutionService is created",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory With a resource and an interpreter Ensure PythonExecutionService is created",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory With a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables for the activated env",
    "time": 0.001
  },
  {
    "name": "Process - PythonExecutionFactory With a resource and an interpreter Ensure we use an existing `create` method if there are no environment variables (0 length) for the activated env",
    "time": 0
  },
  {
    "name": "Process - PythonExecutionFactory With a resource and an interpreter PythonExecutionService is created",
    "time": 0.001
  },
  {
    "name": "Common Process Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "Common - Service Registry Registrations",
    "time": 0.015
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: wsl)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: wsl)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns activation command (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns activation command (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns activation command (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns activation command (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: ksh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns activation command (Shell: wsl)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns activation command (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns activation command (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns activation command (Shell: fish)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: ksh)",
    "time": 0.002
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: fish)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (bash) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure bash Activation command returns undefined (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershellCore)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: powershellCore)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: fish)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: wsl)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: other)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are supported by command prompt",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on non-windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on non-windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are not supported by command prompt",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are supported by powershell",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are no spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are supported by powershell core",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: commandPrompt)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: zsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: wsl)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: gitbash)",
    "time": 0.003
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: xonsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are supported by command prompt",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on non-windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on non-windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are not supported by command prompt",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are supported by powershell",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are supported by powershell core",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.sh Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: cshell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.csh Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershell)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: bash)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.fish Ensure terminal type is not supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: powershellCore)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure terminal type is supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: powershell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: powershellCore)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: commandPrompt)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: gitbash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: bash)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: zsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: ksh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: fish)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: cshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: tshell)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: wsl)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: xonsh)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure terminal type is supported (Shell: other)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are supported by command prompt",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell (on non-windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.bat Ensure batch files are not supported by powershell core (on non-windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are not supported by command prompt",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are supported by powershell",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation (cmd/powershell) and there are spaces in the script file (pythonpath), and script file is activate.ps1 Ensure powershell files are supported by powershell core",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Ensure no activation commands are returned if the feature is disabled",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation for fish escapes spaces in conda filename",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation on bash uses &quot;source&quot; before 4.4.0",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation on bash uses &quot;conda&quot; after 4.4.0",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, with no spaces in env name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, with no spaces in env name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation provides correct activation commands (windows) after 4.4.0 given interpreter path is provided, with spaces in env name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Activation provides correct activation commands (non-windows) after 4.4.0 given interpreter path is provided, with spaces in env name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershell on (windows)",
    "time": 0.002
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershell on (linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershell on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershellCore on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershellCore on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershellCore on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell commandPrompt on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell commandPrompt on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell commandPrompt on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell gitbash on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell gitbash on (linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell gitbash on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell bash on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell bash on (linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell bash on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell zsh on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell zsh on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell zsh on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell ksh on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell ksh on (linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell ksh on (mac)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell fish on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell fish on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell fish on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell cshell on (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell cshell on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell cshell on (mac)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell tshell on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell tshell on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell tshell on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell wsl on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell wsl on (linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell wsl on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell xonsh on (windows)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell xonsh on (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell xonsh on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell other on (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell other on (linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell other on (mac)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershell on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershell on (linux), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershell on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershellCore on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershellCore on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell powershellCore on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell commandPrompt on (windows), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell commandPrompt on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell commandPrompt on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell gitbash on (windows), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell gitbash on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell gitbash on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell bash on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell bash on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell bash on (mac), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell zsh on (windows), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell zsh on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell zsh on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell ksh on (windows), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell ksh on (linux), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell ksh on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell fish on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell fish on (linux), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell fish on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell cshell on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell cshell on (linux), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell cshell on (mac), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell tshell on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell tshell on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell tshell on (mac), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell wsl on (windows), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell wsl on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell wsl on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell xonsh on (windows), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell xonsh on (linux), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell xonsh on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell other on (windows), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell other on (linux), containing spaces in environment name",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Conda activation command for shell other on (mac), containing spaces in environment name",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda If environment is a conda environment, ensure conda activation command is sent (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda If environment is a conda environment, ensure conda activation command is sent (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda If environment is a conda environment, ensure conda activation command is sent (osx)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Get activation script command if environment is not a conda environment",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda If environment is a conda environment and environment detection fails, ensure activatino of script is sent (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda If environment is a conda environment and environment detection fails, ensure activatino of script is sent (osx)",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda If environment is a conda environment and environment detection fails, ensure activatino of script is sent (linux)",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Return undefined if unable to get activation command",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path on windows for powershell",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path with spaces on windows for powershell",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path on windows under powershell, environment name has spaces",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path on windows for powershell-core",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path with spaces on windows for powershell-core",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path on windows for powershell-core, environment name has spaces",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path on windows for cmd.exe",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path with spaces on windows for cmd.exe",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation conda Activation uses full path on windows for cmd.exe, environment name has spaces",
    "time": 0.001
  },
  {
    "name": "Terminal Auto Activation New Terminals should be activated",
    "time": 0.001
  },
  {
    "name": "Terminal Auto Activation New Terminals should be activated with resource of single workspace",
    "time": 0.001
  },
  {
    "name": "Terminal Auto Activation New Terminals should be activated with resource of main workspace",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated (1 activation command, and preserve focus in terminal is false)",
    "time": 0.001
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is false)",
    "time": 0.001
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is false) (even when not waiting)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated (2 activation command, and preserve focus in terminal is false)",
    "time": 0.001
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (2 activation command, and preserve focus in terminal is false)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (2 activation command, and preserve focus in terminal is false) (even when not waiting)",
    "time": 0.001
  },
  {
    "name": "Terminal Base Activator Terminal is activated (1 activation command, and preserve focus in terminal is true)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true) (even when not waiting)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated (1 activation command, and preserve focus in terminal is true)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true)",
    "time": 0
  },
  {
    "name": "Terminal Base Activator Terminal is activated only once (1 activation command, and preserve focus in terminal is true) (even when not waiting)",
    "time": 0.001
  },
  {
    "name": "Terminal Activator Terminal is activated and handlers are invoked",
    "time": 0.001
  },
  {
    "name": "Terminal Activator Terminal is not activated and handlers are invoked",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.002
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can activate with Command Prompt Terminal Activation is has failed Diagnostic must be handled",
    "time": 0.002
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can activate with Command Prompt Terminal Activation is has failed Diagnostic must be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.003
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Windows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is powershellCore Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is commandPrompt Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is gitbash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is bash Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is zsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is ksh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is fish Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is cshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is tshell Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is wsl Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is xonsh Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0.001
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is successful Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Activation Powershell Failed Handler OS is Non-Widows Shell is other Can&apos;t activate with Command Prompt Terminal Activation is has failed Diagnostic must not be handled",
    "time": 0
  },
  {
    "name": "Terminal Command Prompt Getting Path Command Prompt executable (32 on 64Win)",
    "time": 0
  },
  {
    "name": "Terminal Command Prompt Getting Path Command Prompt executable (not 32 on 64Win)",
    "time": 0
  },
  {
    "name": "Terminal Command Prompt Use command prompt as default shell",
    "time": 0.001
  },
  {
    "name": "Terminals Activation - Pipenv Without a resource No commands for no interpreter",
    "time": 0.001
  },
  {
    "name": "Terminals Activation - Pipenv Without a resource No commands for an interpreter that is not Pipenv",
    "time": 0.002
  },
  {
    "name": "Terminals Activation - Pipenv Without a resource pipenv shell is returned for pipenv interpeter",
    "time": 0.001
  },
  {
    "name": "Terminals Activation - Pipenv Without a resource pipenv is properly escaped",
    "time": 0.001
  },
  {
    "name": "Terminals Activation - Pipenv With a resource No commands for no interpreter",
    "time": 0
  },
  {
    "name": "Terminals Activation - Pipenv With a resource No commands for an interpreter that is not Pipenv",
    "time": 0.001
  },
  {
    "name": "Terminals Activation - Pipenv With a resource pipenv shell is returned for pipenv interpeter",
    "time": 0
  },
  {
    "name": "Terminals Activation - Pipenv With a resource pipenv is properly escaped",
    "time": 0
  },
  {
    "name": "Terminal Service Factory Ensure same instance of terminal service is returned",
    "time": 0.001
  },
  {
    "name": "Terminal Service Factory Ensure different instance of terminal service is returned when title is provided",
    "time": 0.003
  },
  {
    "name": "Terminal Service Factory Ensure different instance of terminal services are created",
    "time": 0.001
  },
  {
    "name": "Terminal Service Factory Ensure same terminal is returned when using resources from the same workspace",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Misc Create terminal without a title",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Misc Create terminal with a title",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Misc Ensure spaces in command is quoted",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Misc Ensure empty args are ignored",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Misc Ensure empty args are ignored with s in command",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must be empty if activation of terminals is disabled",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must return conda activation command if interpreter is conda",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must return undefined if none of the proivders support the shell",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must return command from bash if that is supported and others are not",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must return command from pipenv if that is supported and even if others are supported",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must return command from Command Prompt if that is supported and others are not",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command must return command from Command Prompt if that is supported, and so is bash but no commands are returned",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must be empty for unknown os",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must be empty for unknown os",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (OSX)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Windows)",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Linux)",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (OSX)",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation Without a resource Activation command for Shell must never use pipenv nor pyenv (Windows)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must be empty if activation of terminals is disabled",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must return conda activation command if interpreter is conda",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must return undefined if none of the proivders support the shell",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must return command from bash if that is supported and others are not",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must return command from pipenv if that is supported and even if others are supported",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must return command from Command Prompt if that is supported and others are not",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command must return command from Command Prompt if that is supported, and so is bash but no commands are returned",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must be empty for unknown os",
    "time": 0.004
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must be empty for unknown os",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Linux)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (OSX)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Windows)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Linux)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (OSX)",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Activation With a resource Activation command for Shell must never use pipenv nor pyenv (Windows)",
    "time": 0
  },
  {
    "name": "Terminal Service helpers Identify Terminal Shell Use shell detector to identify terminal shells",
    "time": 0.001
  },
  {
    "name": "Terminal Service helpers Identify Terminal Shell Detector passed throught constructor is used by shell detector class",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation pyenv All shells should be supported",
    "time": 0.001
  },
  {
    "name": "Terminal Environment Activation pyenv Ensure no activation commands are returned if intrepreter info is not found",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation pyenv Ensure no activation commands are returned if intrepreter is not pyenv",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation pyenv Ensure no activation commands are returned if intrepreter envName is empty",
    "time": 0
  },
  {
    "name": "Terminal Environment Activation pyenv Ensure activation command is returned",
    "time": 0
  },
  {
    "name": "Terminal Service Ensure terminal is disposed",
    "time": 0.103
  },
  {
    "name": "Terminal Service Ensure command is sent to terminal and it is shown",
    "time": 0.102
  },
  {
    "name": "Terminal Service Ensure text is sent to terminal and it is shown",
    "time": 0.103
  },
  {
    "name": "Terminal Service Ensure terminal shown",
    "time": 0.101
  },
  {
    "name": "Terminal Service Ensure terminal shown and focus is set to the Terminal",
    "time": 0.108
  },
  {
    "name": "Terminal Service Ensure terminal is activated once after creation",
    "time": 0.105
  },
  {
    "name": "Terminal Service Ensure terminal is activated once before sending text",
    "time": 0.103
  },
  {
    "name": "Terminal Service Ensure close event is not fired when another terminal is closed",
    "time": 0.102
  },
  {
    "name": "Terminal Service Ensure close event is not fired when terminal is closed",
    "time": 0.101
  },
  {
    "name": "Common Terminal Service Registry Ensure services are registered",
    "time": 0.001
  },
  {
    "name": "Shell Detector Test identification of Terminal Shells in order of priority",
    "time": 0.003
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (OS Unknown)",
    "time": 0
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Unknown)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector (OS Unknown)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Use shell provided by detector (when a terminal is provided) (OS Unknown)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Use shell provided by detector with highest priority (OS Unknown)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Fall back to detectors that can identify a shell (OS Unknown)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Test identification of Terminal Shells in order of priority",
    "time": 0.002
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (OS Windows)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Windows)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector (OS Windows)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector (when a terminal is provided) (OS Windows)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector with highest priority (OS Windows)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Fall back to detectors that can identify a shell (OS Windows)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Test identification of Terminal Shells in order of priority",
    "time": 0.002
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (OS OSX)",
    "time": 0
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS OSX)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector (OS OSX)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Use shell provided by detector (when a terminal is provided) (OS OSX)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector with highest priority (OS OSX)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Fall back to detectors that can identify a shell (OS OSX)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Test identification of Terminal Shells in order of priority",
    "time": 0.002
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (OS Linux)",
    "time": 0
  },
  {
    "name": "Shell Detector Use default shell based on OS if there are no shell detectors (when a terminal is provided) (OS Linux)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector (OS Linux)",
    "time": 0
  },
  {
    "name": "Shell Detector Use shell provided by detector (when a terminal is provided) (OS Linux)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Use shell provided by detector with highest priority (OS Linux)",
    "time": 0.001
  },
  {
    "name": "Shell Detector Fall back to detectors that can identify a shell (OS Linux)",
    "time": 0.001
  },
  {
    "name": "Shell Detectors Test Priority of detectors",
    "time": 0
  },
  {
    "name": "Shell Detectors Test identification of Terminal Shells (base class method)",
    "time": 0.002
  },
  {
    "name": "Shell Detectors Identify shell based on name of terminal",
    "time": 0.001
  },
  {
    "name": "Shell Detectors Identify shell based on VSC Environment",
    "time": 0.002
  },
  {
    "name": "Shell Detectors Identify shell based on VSC Settings",
    "time": 0
  },
  {
    "name": "Shell Detectors Get shell path from settings (OS Unknown)",
    "time": 0
  },
  {
    "name": "Shell Detectors Get shell path from settings (OS Windows)",
    "time": 0.001
  },
  {
    "name": "Shell Detectors Get shell path from settings (OS OSX)",
    "time": 0.001
  },
  {
    "name": "Shell Detectors Get shell path from settings (OS Linux)",
    "time": 0
  },
  {
    "name": "Shell Detectors Identify shell based on user environment variables",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Windows &lt; 10 is cmd.exe",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Windows &gt;= 10 32bit is powershell.exe",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Windows &gt;= 10 64bit is powershell.exe",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Windows &lt; 10 is what ever is defined in env.comspec",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on OSX is /bin/bash",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on OSX is what ever is in env.SHELL",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on OSX is what ever is /bin/bash if env.SHELL == /bin/false",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Linux is /bin/bash",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Linux is what ever is in env.SHELL",
    "time": 0
  },
  {
    "name": "Shell Detectors Default shell on Linux is what ever is /bin/bash if env.SHELL == /bin/false",
    "time": 0
  },
  {
    "name": "Deferred Resolve",
    "time": 0
  },
  {
    "name": "Deferred Reject",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache (without workspaces): simple string",
    "time": 0.001
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache must be cleared when clearing globally: simple string",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache must be cleared: simple string",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and expired data is not returned: simple string",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache (with workspaces): simple string",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources point to same storage location (without workspaces): simple string",
    "time": 0.001
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources point to same storage location (with workspaces): simple string",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources do not point to same storage location (with multiple workspaces): simple string",
    "time": 0.001
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache (without workspaces): undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache must be cleared when clearing globally: undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache must be cleared: undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and expired data is not returned: undefined",
    "time": 0.001
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache (with workspaces): undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources point to same storage location (without workspaces): undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources point to same storage location (with workspaces): undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources do not point to same storage location (with multiple workspaces): undefined",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache (without workspaces): object",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache must be cleared when clearing globally: object",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache must be cleared: object",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and expired data is not returned: object",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache (with workspaces): object",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources point to same storage location (without workspaces): object",
    "time": 0.001
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources point to same storage location (with workspaces): object",
    "time": 0
  },
  {
    "name": "Common Utils - CacheUtils Data is stored in cache and different resources do not point to same storage location (with multiple workspaces): object",
    "time": 0
  },
  {
    "name": "Common Utils - Decorators Result must be cached when using cache decorator",
    "time": 0.001
  },
  {
    "name": "Common Utils - Decorators Cache result must be cleared when cache expires",
    "time": 0.112
  },
  {
    "name": "Common Utils - Decorators Debounce: one sync call",
    "time": 0.104
  },
  {
    "name": "Common Utils - Decorators Debounce: one async call &amp; no wait",
    "time": 0.107
  },
  {
    "name": "Common Utils - Decorators Debounce: one async call",
    "time": 0.102
  },
  {
    "name": "Common Utils - Decorators Debounce: one async call and ensure exceptions are re-thrown",
    "time": 0.102
  },
  {
    "name": "Common Utils - Decorators Debounce: multiple async calls",
    "time": 0.109
  },
  {
    "name": "Common Utils - Decorators Debounce: multiple async calls when awaiting on all",
    "time": 0.102
  },
  {
    "name": "Common Utils - Decorators Debounce: multiple async calls &amp; wait on some",
    "time": 0.208
  },
  {
    "name": "Common Utils - Decorators Debounce: multiple calls grouped",
    "time": 0.106
  },
  {
    "name": "Common Utils - Decorators Debounce: multiple calls spread",
    "time": 0.212
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() whitespace removed in multiline pattern (example of typical usage)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() whitespace removed (&quot;spam eggs&quot;)",
    "time": 0.001
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() whitespace removed (&quot;spam           eggs&quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() whitespace removed (&quot;  &quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() whitespace removed (&quot;          &quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() pattern not changed (&quot;^(?:spam\\b.*)$&quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() pattern not changed (&quot;spam&quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() pattern not changed (&quot;^spam$&quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() pattern not changed (&quot;spam$&quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() pattern not changed (&quot;^spam&quot;)",
    "time": 0.001
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() no pattern (&quot;&quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() no pattern (&quot;         &quot;)",
    "time": 0
  },
  {
    "name": "Utils for regular expressions - verboseRegExp() no pattern (&quot;  &quot;)",
    "time": 0
  },
  {
    "name": "parseRange() valid strings",
    "time": 0.002
  },
  {
    "name": "parseRange() valid numbers",
    "time": 0
  },
  {
    "name": "parseRange() bad strings",
    "time": 0.002
  },
  {
    "name": "parsePosition() valid strings",
    "time": 0
  },
  {
    "name": "parsePosition() valid numbers",
    "time": 0
  },
  {
    "name": "parsePosition() bad strings",
    "time": 0.001
  },
  {
    "name": "Version Utils Must convert undefined if empty strinfg",
    "time": 0
  },
  {
    "name": "Version Utils Must convert version correctly",
    "time": 0
  },
  {
    "name": "Version Utils Must convert version correctly with pre-release",
    "time": 0
  },
  {
    "name": "Version Utils Must remove invalid pre-release channels",
    "time": 0
  },
  {
    "name": "Version Utils Must default versions partgs to 0 if they are not numeric",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when there are changes to settings",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Event is not fired when there are not changes to settings",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Event is not fired when workspace is not tracked",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when the environment file is modified (without a workspace)",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when the environment file is deleted (without a workspace)",
    "time": 0.001
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when the environment file is created (without a workspace)",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider File system watcher event handlers are added once (without a workspace)",
    "time": 0.001
  },
  {
    "name": "Multiroot Environment Variables Provider Getting environment variables (without an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (without a workspace)",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Getting environment variables (with an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (without a workspace)",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Getting environment variables (with an envfile, with PATH in current env, with PYTHONPATH in current env) &amp; (without a workspace)",
    "time": 0.001
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when the environment file is modified (with a workspace)",
    "time": 0.001
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when the environment file is deleted (with a workspace)",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider Event is fired when the environment file is created (with a workspace)",
    "time": 0
  },
  {
    "name": "Multiroot Environment Variables Provider File system watcher event handlers are added once (with a workspace)",
    "time": 0.001
  },
  {
    "name": "Multiroot Environment Variables Provider Getting environment variables (without an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (with a workspace)",
    "time": 0.002
  },
  {
    "name": "Multiroot Environment Variables Provider Getting environment variables (with an envfile, without PATH in current env, without PYTHONPATH in current env) &amp; (with a workspace)",
    "time": 0.001
  },
  {
    "name": "Multiroot Environment Variables Provider Getting environment variables (with an envfile, with PATH in current env, with PYTHONPATH in current env) &amp; (with a workspace)",
    "time": 0.001
  },
  {
    "name": "Environment Variables Service Custom variables should be undefined with no argument",
    "time": 0.001
  },
  {
    "name": "Environment Variables Service Custom variables should be undefined with non-existent files",
    "time": 0
  },
  {
    "name": "Environment Variables Service Custom variables should be undefined when folder name is passed instead of a file name",
    "time": 0
  },
  {
    "name": "Environment Variables Service Custom variables should be not undefined with a valid environment file",
    "time": 0.002
  },
  {
    "name": "Environment Variables Service Custom variables should be parsed from env file",
    "time": 0.001
  },
  {
    "name": "Environment Variables Service PATH and PYTHONPATH from env file should be returned as is",
    "time": 0.001
  },
  {
    "name": "Environment Variables Service Simple variable substitution is supported",
    "time": 0.002
  },
  {
    "name": "Environment Variables Service Ensure variables are merged",
    "time": 0.001
  },
  {
    "name": "Environment Variables Service Ensure path variabnles variables are not merged into target",
    "time": 0
  },
  {
    "name": "Environment Variables Service Ensure path variabnles variables in target are left untouched",
    "time": 0.001
  },
  {
    "name": "Environment Variables Service Ensure appending PATH has no effect if an undefined value or empty string is provided and PATH does not exist in vars object",
    "time": 0
  },
  {
    "name": "Environment Variables Service Ensure appending PYTHONPATH has no effect if an undefined value or empty string is provided and PYTHONPATH does not exist in vars object",
    "time": 0
  },
  {
    "name": "Environment Variables Service Ensure appending PATH has no effect if an empty string is provided and path does not exist in vars object",
    "time": 0
  },
  {
    "name": "Environment Variables Service Ensure appending PYTHONPATH has no effect if an empty string is provided and PYTHONPATH does not exist in vars object",
    "time": 0
  },
  {
    "name": "Environment Variables Service Ensure PATH is appeneded",
    "time": 0
  },
  {
    "name": "Environment Variables Service Ensure appending PYTHONPATH has no effect if an empty string is provided and PYTHONPATH does not exist in vars object",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Custom variables should be parsed from env file",
    "time": 0.001
  },
  {
    "name": "Parsing Environment Variables Files PATH and PYTHONPATH from env file should be returned as is",
    "time": 0.001
  },
  {
    "name": "Parsing Environment Variables Files Variable names must be alpha + alnum/underscore",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Empty values become empty string",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Outer quotation marks are removed",
    "time": 0.001
  },
  {
    "name": "Parsing Environment Variables Files Whitespace is ignored",
    "time": 0.001
  },
  {
    "name": "Parsing Environment Variables Files Blank lines are ignored",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Comments are ignored",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Basic substitution syntax",
    "time": 0.005
  },
  {
    "name": "Parsing Environment Variables Files Curly braces are required for substitution",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Nested substitution is not supported",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files Other bad substitution syntax",
    "time": 0.001
  },
  {
    "name": "Parsing Environment Variables Files Recursive substitution is allowed",
    "time": 0.001
  },
  {
    "name": "Parsing Environment Variables Files Substitution may be escaped",
    "time": 0
  },
  {
    "name": "Parsing Environment Variables Files base substitution variables",
    "time": 0
  },
  {
    "name": "Common variables Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "Interpreters - selector Suggestions (Windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters - selector Suggestions (Non-Windows)",
    "time": 0
  },
  {
    "name": "Interpreters - selector Update Global settings when there are no workspaces",
    "time": 0.001
  },
  {
    "name": "Interpreters - selector Update workspace folder settings when there is one workspace folder",
    "time": 0.001
  },
  {
    "name": "Interpreters - selector Update seleted workspace folder settings when there is more than one workspace folder",
    "time": 0.001
  },
  {
    "name": "Interpreters - selector Do not update anything when user does not select a workspace folder and there is more than one workspace folder",
    "time": 0.001
  },
  {
    "name": "Data Science Tests formatting stream text",
    "time": 0
  },
  {
    "name": "Data Science Tests input history",
    "time": 0.001
  },
  {
    "name": "Data Science Tests parsing cells",
    "time": 0.003
  },
  {
    "name": "Data Science Survey Banner Data science banner should be enabled after we hit our command execution count",
    "time": 0.002
  },
  {
    "name": "Data Science Survey Banner Do not show data science banner when it is disabled",
    "time": 0.002
  },
  {
    "name": "Data Science Survey Banner Do not show data science banner if we have not hit our command count",
    "time": 0.001
  },
  {
    "name": "Debug Location Tracker Check debug location",
    "time": 0
  },
  {
    "name": "CellHashProvider Unit Tests Add a cell and edit it",
    "time": 0.004
  },
  {
    "name": "CellHashProvider Unit Tests Add a cell, delete it, and recreate it",
    "time": 0.001
  },
  {
    "name": "CellHashProvider Unit Tests Delete code below",
    "time": 0
  },
  {
    "name": "CellHashProvider Unit Tests Modify code after sending twice",
    "time": 0.001
  },
  {
    "name": "CellHashProvider Unit Tests Run same cell twice",
    "time": 0.001
  },
  {
    "name": "CellHashProvider Unit Tests Two files with same cells",
    "time": 0.002
  },
  {
    "name": "CellHashProvider Unit Tests Delete cell with dupes in code, put cell back",
    "time": 0.001
  },
  {
    "name": "CellHashProvider Unit Tests Add a cell and edit different parts of it",
    "time": 0.002
  },
  {
    "name": "CellHashProvider Unit Tests Add a cell and edit it to be exactly the same",
    "time": 0.002
  },
  {
    "name": "CellHashProvider Unit Tests Add a cell and edit it to not be exactly the same",
    "time": 0.002
  },
  {
    "name": "CellHashProvider Unit Tests Apply multiple edits at once",
    "time": 0.001
  },
  {
    "name": "CellHashProvider Unit Tests Restart kernel",
    "time": 0.001
  },
  {
    "name": "CellHashProvider Unit Tests More than one cell in range",
    "time": 0
  },
  {
    "name": "DataScienceCodeLensProvider Unit Tests Initialize Code Lenses one document",
    "time": 0.001
  },
  {
    "name": "DataScienceCodeLensProvider Unit Tests Initialize Code Lenses same doc called",
    "time": 0.001
  },
  {
    "name": "DataScienceCodeLensProvider Unit Tests Initialize Code Lenses new name / version",
    "time": 0.002
  },
  {
    "name": "DataScience Code Watcher Unit Tests Add a file with just a #%% mark to a code watcher",
    "time": 0.004
  },
  {
    "name": "DataScience Code Watcher Unit Tests Add a file without a mark to a code watcher",
    "time": 0.001
  },
  {
    "name": "DataScience Code Watcher Unit Tests Add a file with multiple marks to a code watcher",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Add a file with custom marks to a code watcher",
    "time": 0.006
  },
  {
    "name": "DataScience Code Watcher Unit Tests Make sure invalid regex from a user still work",
    "time": 0.006
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunCell command",
    "time": 0.004
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunFileInteractive command",
    "time": 0.004
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunAllCells command",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunCurrentCell command",
    "time": 0.007
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunCellAndAllBelow command",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunAllCellsAbove command",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunToLine command",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunToLine command with nothing on the lines",
    "time": 0.001
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunFromLine command",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunSelection command",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunCellAndAdvance command with next cell",
    "time": 0.005
  },
  {
    "name": "DataScience Code Watcher Unit Tests CodeLens returned after settings changed is different",
    "time": 0.006
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunAllCellsAbove command with an error",
    "time": 0.006
  },
  {
    "name": "DataScience Code Watcher Unit Tests Test the RunAllCells command with an error",
    "time": 0.005
  },
  {
    "name": "DataScience Error Handler Unit Tests Default error",
    "time": 0.001
  },
  {
    "name": "DataScience Error Handler Unit Tests Jupyter Self Certificates Error",
    "time": 0
  },
  {
    "name": "DataScience Error Handler Unit Tests Jupyter Install Error",
    "time": 0.003
  },
  {
    "name": "Jupyter Execution Working notebook and commands found",
    "time": 0.036
  },
  {
    "name": "Jupyter Execution Failing notebook throws exception",
    "time": 0.005
  },
  {
    "name": "Jupyter Execution Failing others throws exception",
    "time": 0.004
  },
  {
    "name": "Jupyter Execution Slow notebook startups throws exception",
    "time": 0.02
  },
  {
    "name": "Jupyter Execution Other than active works",
    "time": 0.004
  },
  {
    "name": "Jupyter Execution Missing kernel python still finds interpreter",
    "time": 0.002
  },
  {
    "name": "Jupyter Execution Other than active finds closest match",
    "time": 0.004
  },
  {
    "name": "Jupyter Execution Kernelspec is deleted on exit",
    "time": 0.015
  },
  {
    "name": "Jupyter Execution Jupyter found on the path",
    "time": 0.01
  },
  {
    "name": "Jupyter Execution Jupyter found on the path skipped",
    "time": 0.004
  },
  {
    "name": "DataScience code gathering unit tests Logs a cell execution",
    "time": 0.021
  },
  {
    "name": "DataScience code gathering unit tests Gathers program slices for a cell",
    "time": 0.009
  },
  {
    "name": "DataScience Intellisense Unit Tests Add a single cell",
    "time": 0.003
  },
  {
    "name": "DataScience Intellisense Unit Tests Add two cells",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Add a cell and edit",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Add a cell and remove",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Remove a section in the middle",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Remove a bunch in a row",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Remove from a line",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Add cell after adding code",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Collapse expand cell",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Collapse expand cell after adding code",
    "time": 0.001
  },
  {
    "name": "DataScience Intellisense Unit Tests Add a cell and remove it",
    "time": 0.002
  },
  {
    "name": "DataScience Intellisense Unit Tests Add a bunch of cells and remove them",
    "time": 0.001
  },
  {
    "name": "Interactive window command listener Import",
    "time": 0.003
  },
  {
    "name": "Interactive window command listener Import File",
    "time": 0.002
  },
  {
    "name": "Interactive window command listener Export File",
    "time": 0.003
  },
  {
    "name": "Interactive window command listener Export File and output",
    "time": 0.003
  },
  {
    "name": "Interactive window command listener Export skipped on no file",
    "time": 0
  },
  {
    "name": "Interactive window command listener Export happens on no file",
    "time": 0.003
  },
  {
    "name": "JupyterPasswordConnect getPasswordConnectionInfo",
    "time": 0.014
  },
  {
    "name": "JupyterPasswordConnect getPasswordConnectionInfo allowUnauthorized",
    "time": 0.004
  },
  {
    "name": "JupyterPasswordConnect getPasswordConnectionInfo failure",
    "time": 0.002
  },
  {
    "name": "JupyterVariables getVariables no server",
    "time": 0.001
  },
  {
    "name": "JupyterVariables getVariables no cells",
    "time": 0.001
  },
  {
    "name": "JupyterVariables getVariables no output",
    "time": 0.001
  },
  {
    "name": "JupyterVariables getVariables bad output type",
    "time": 0.001
  },
  {
    "name": "JupyterVariables getVariables fake data",
    "time": 0.001
  },
  {
    "name": "JupyterVariables getValue fake data",
    "time": 0.001
  },
  {
    "name": "Interactive Shift Enter Banner Shift Enter Banner with Jupyter available",
    "time": 0.012
  },
  {
    "name": "Interactive Shift Enter Banner Shift Enter Banner without Jupyter available",
    "time": 0.003
  },
  {
    "name": "Interactive Shift Enter Banner Shift Enter Banner don&apos;t check Jupyter when disabled",
    "time": 0.001
  },
  {
    "name": "Interactive Shift Enter Banner Shift Enter Banner changes setting",
    "time": 0.004
  },
  {
    "name": "Interactive Shift Enter Banner Shift Enter Banner say no",
    "time": 0.01
  },
  {
    "name": "Debugger - Launcher Script Provider Ensure launcher script exists",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher does not contains spaces Test debug launcher args",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher does not contains spaces Test non-debug launcher args",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher does not contains spaces Test debug launcher args and custom ptvsd",
    "time": 0.001
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher does not contains spaces Test non-debug launcher args and custom ptvsd",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher contains spaces Test debug launcher args",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher contains spaces Test non-debug launcher args",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher contains spaces Test debug launcher args and custom ptvsd",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider When path to ptvsd launcher contains spaces Test non-debug launcher args and custom ptvsd",
    "time": 0
  },
  {
    "name": "Debugger - Launcher Script Provider External Debug Launcher When path to ptvsd launcher does not contains spaces Test remote debug launcher args (and do not wait for debugger to attach)",
    "time": 0.001
  },
  {
    "name": "Debugger - Launcher Script Provider External Debug Launcher When path to ptvsd launcher does not contains spaces Test remote debug launcher args (and wait for debugger to attach)",
    "time": 0.001
  },
  {
    "name": "Debugger - Launcher Script Provider External Debug Launcher When path to ptvsd launcher contains spaces Test remote debug launcher args (and do not wait for debugger to attach)",
    "time": 0.001
  },
  {
    "name": "Debugger - Launcher Script Provider External Debug Launcher When path to ptvsd launcher contains spaces Test remote debug launcher args (and wait for debugger to attach)",
    "time": 0
  },
  {
    "name": "Debugging - Banner Browser is displayed when launching service along with debugger launch counter",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 0)",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 1)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 2)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 3)",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 4)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 5)",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 6)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 7)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 8)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 9)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 10)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 11)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 12)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 13)",
    "time": 0.003
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 14)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 15)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 16)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 17)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 18)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 19)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 20)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 21)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 22)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 23)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 24)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 25)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 26)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 27)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 28)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 29)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 30)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 31)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 32)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 33)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 34)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 35)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 36)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 37)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 38)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 39)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 40)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 41)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 42)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 43)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 44)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 45)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 46)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 47)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 48)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 49)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 50)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 51)",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 52)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 53)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 54)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 55)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 56)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 57)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 58)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 59)",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 60)",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 61)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 62)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 63)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 64)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 65)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 66)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 67)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 68)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 69)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 70)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 71)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 72)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 73)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 74)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 75)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 76)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 77)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 78)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 79)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 80)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 81)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 82)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 83)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 84)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 85)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 86)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 87)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 88)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 89)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 90)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 91)",
    "time": 0
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 92)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 93)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 94)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 95)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 96)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 97)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 98)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner users are selected 10% of the time (random: 99)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner user selection does not change (random: 0)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner user selection does not change (random: 10)",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner Increment Debugger Launch Counter when debug session starts",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner Do not Increment Debugger Launch Counter when debug session starts and Banner is disabled",
    "time": 0.001
  },
  {
    "name": "Debugging - Banner shouldShow must return false when Banner is disabled",
    "time": 0
  },
  {
    "name": "Debugging - Banner shouldShow must return false when Banner is enabled and debug counter is not same as threshold",
    "time": 0
  },
  {
    "name": "Debugging - Banner shouldShow must return true when Banner is enabled and debug counter is same as threshold",
    "time": 0
  },
  {
    "name": "Debugging - Banner show must be invoked when shouldShow returns true",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner show must not be invoked the second time after dismissing the message",
    "time": 0.002
  },
  {
    "name": "Debugging - Banner Disabling banner must store value of &apos;false&apos; in global store",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Service Should use attach resolver when passing attach config",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Service Should use launch resolver when passing launch config with request=launch",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Service Should use launch resolver when passing launch config with request=undefined",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Service Picker should be displayed",
    "time": 0.003
  },
  {
    "name": "Debugging - Configuration Service Existing Configuration items must be removed before displaying picker",
    "time": 0.003
  },
  {
    "name": "Debugging - Configuration Service Ensure generated config is returned",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Service Ensure default config is returned",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Completion Provider Activation will register the completion provider",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Completion Provider Cannot provide completions for non launch.json files",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Completion Provider Cannot provide completions when there is no configurations section in json",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Completion Provider Cannot provide completions when cursor position is not in configurations array",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Completion Provider Cannot provide completions when cursor position is in an empty configurations array",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Completion Provider No Completions for non launch.json",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Completion Provider No Completions for files ending with launch.json",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Completion Provider Get Completions",
    "time": 0.002
  },
  {
    "name": "Debugging - launch.json Updater Service Activation will register the required commands",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Configuration Array is detected as being empty",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Configuration Array is not empty",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Cursor is not positioned in the configurations array",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service Cursor is positioned in the empty configurations array",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Cursor is positioned before an item in the configurations array",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Cursor is positioned before an item in the middle of the configurations array",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Cursor is positioned after an item in the configurations array",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Cursor is positioned after an item in the middle of the configurations array",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service Text to be inserted must be prefixed with a comma",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Text to be inserted must not be prefixed with a comma (as a comma already exists)",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Text to be inserted must be suffixed with a comma",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service Text to be inserted must not be prefixed nor suffixed with commas",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service When inserting the debug config into the json file format the document",
    "time": 0.002
  },
  {
    "name": "Debugging - launch.json Updater Service No changes to configuration if there is not active document",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service No changes to configuration if the active document is not same as the document passed in",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service No changes to configuration if cancellation token has been cancelled",
    "time": 0.002
  },
  {
    "name": "Debugging - launch.json Updater Service No changes to configuration if no configuration items are returned",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service Changes are made to the configuration",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service If cursor is at the begining of line 1 then there is no comma before cursor",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service If cursor is positioned after some text (not a comma) then detect this",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service If cursor is positioned after a comma then detect this",
    "time": 0.001
  },
  {
    "name": "Debugging - launch.json Updater Service If cursor is positioned in an empty line and previous line ends with comma, then detect this",
    "time": 0
  },
  {
    "name": "Debugging - launch.json Updater Service If cursor is positioned in an empty line and previous line does not end with comma, then detect this",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Django getManagePyPath should return undefined if file doesn&apos;t exist",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Django getManagePyPath should file path",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Django Resolve variables (with resource)",
    "time": 0.452
  },
  {
    "name": "Debugging - Configuration Provider Django Validation of path should return errors if path is undefined",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Django Validation of path should return errors if path is empty",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Django Validation of path should return errors if resolved path is empty",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Django Validation of path should return errors if resolved path doesn&apos;t exist",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Django Validation of path should return errors if resolved path is non-python",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Django Validation of path should return errors if resolved path is python",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Django Launch JSON with valid python path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Django Launch JSON with selected managepy path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Django Launch JSON with default managepy path",
    "time": 0.002
  },
  {
    "name": "Debugging - Configuration Provider File Launch JSON with default managepy path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Flask getApplicationPath should return undefined if file doesn&apos;t exist",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Flask getApplicationPath should file path",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Flask Launch JSON with valid python path",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Flask Launch JSON with selected app path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Flask Launch JSON with default managepy path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Module Launch JSON with default module name",
    "time": 0.002
  },
  {
    "name": "Debugging - Configuration Provider Module Launch JSON with selected module name",
    "time": 0.002
  },
  {
    "name": "Debugging - Configuration Provider Factory Configuration Provider for launchFile",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Factory Configuration Provider for remoteAttach",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Factory Configuration Provider for launchDjango",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Factory Configuration Provider for launchFlask",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Factory Configuration Provider for launchModule",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Factory Configuration Provider for launchPyramid",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Pyramid getDevelopmentIniPath should return undefined if file doesn&apos;t exist",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Pyramid getDevelopmentIniPath should file path",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Resolve variables (with resource)",
    "time": 0.444
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Validation of path should return errors if path is undefined",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Validation of path should return errors if path is empty",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path is empty",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path doesn&apos;t exist",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path is non-ini",
    "time": 0
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Validation of path should return errors if resolved path is ini",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Launch JSON with valid ini path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Launch JSON with selected ini path",
    "time": 0.002
  },
  {
    "name": "Debugging - Configuration Provider Pyramid Launch JSON with default ini path",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Remote Attach Configure port will display prompt",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Remote Attach Configure port will default to 5678 if entered value is not a number",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Remote Attach Configure port will default to 5678",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Remote Attach Configure port will use user selected value",
    "time": 0.001
  },
  {
    "name": "Debugging - Configuration Provider Remote Attach Launch JSON with default host name",
    "time": 0.002
  },
  {
    "name": "Debugging - Configuration Provider Remote Attach Launch JSON with user defined host name",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed with a Workspace Folder and active file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file",
    "time": 0.003
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure &apos;localRoot&apos; is left unaltered",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;localhost&apos;",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure drive letter is lower cased for local path mappings on Windows when host is &apos;localhost&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure drive letter is lower cased for local path mappings on Windows when host is &apos;localhost&apos; and with existing path mappings",
    "time": 0.463
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure drive letter is lower cased for local path mappings on Windows when host is &apos;127.0.0.1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure drive letter is lower cased for local path mappings on Windows when host is &apos;127.0.0.1&apos; and with existing path mappings",
    "time": 0.429
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure path mappings are automatically added when host is &apos;::1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure drive letter is lower cased for local path mappings on Windows when host is &apos;::1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure drive letter is lower cased for local path mappings on Windows when host is &apos;::1&apos; and with existing path mappings",
    "time": 0.435
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used",
    "time": 0.415
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used",
    "time": 0.415
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure &apos;remoteRoot&apos; is left unaltered",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure &apos;port&apos; is left unaltered",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure &apos;debugOptions&apos; are left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Windows Ensure justMyCode property is correctly derived from debugStdLib",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed with a Workspace Folder and active file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file",
    "time": 0.003
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure &apos;localRoot&apos; is left unaltered",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;localhost&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure path mappings are automatically added when host is &apos;::1&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used",
    "time": 0.416
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used",
    "time": 0.411
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure &apos;remoteRoot&apos; is left unaltered",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure &apos;port&apos; is left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure &apos;debugOptions&apos; are left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = OSX Ensure justMyCode property is correctly derived from debugStdLib",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed with a Workspace Folder and active file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure &apos;localRoot&apos; is left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;localhost&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;localhost&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;127.0.0.1&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;127.0.0.1&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure path mappings are automatically added when host is &apos;::1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure local path mappings are not modified when not pointing to a local drive when host is &apos;::1&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure path mappings are not automatically added when host is &apos;192.168.1.123&apos;",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure path mappings are not automatically added when host is &apos;don.debugger.com&apos;",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used",
    "time": 0.41
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure &apos;localRoot&apos; and &apos;remoteRoot&apos; is used",
    "time": 0.41
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure &apos;remoteRoot&apos; is left unaltered",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure &apos;port&apos; is left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure &apos;debugOptions&apos; are left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver attach, OS = Linux Ensure justMyCode property is correctly derived from debugStdLib",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver Program should return filepath of active editor if file is python",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Program should return undefined if active file is not python",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Program should return undefined if there is no active editor",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Should get workspace folder when workspace folder is provided",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Should get directory of active program when there are not workspace folders",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Should get directory of active program when there are 0 workspace folders",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Should return uri of workspace folder if there is only one workspace folder",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Should return uri of workspace folder corresponding to program if there is more than one workspace folder",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Should return undefined when program does not belong to any of the workspace folders",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Do nothing if debug configuration is undefined",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Python path in debug config must point to pythonpath in settings if pythonPath in config is not set",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Python path in debug config must point to pythonpath in settings  if pythonPath in config is ${config:python.pythonPath}",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Local host = true for localhost",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Local host = true for 127.0.0.1",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Local host = true for ::1",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Local host = false for 127.0.0.2",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Local host = false for 156.1.2.3",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Local host = false for ::2",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Is debugging flask=true",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Is debugging flask=false",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Is debugging flask=false when not defined",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Launch Defaults should be returned when an empty object is passed with a Workspace Folder and active file",
    "time": 0.003
  },
  {
    "name": "Debugging - Config Resolver Launch Defaults should be returned when an object with &apos;noDebug&apos; property is passed with a Workspace Folder and active file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver Launch Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and active file",
    "time": 0.004
  },
  {
    "name": "Debugging - Config Resolver Launch Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and no active file",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Defaults should be returned when an empty object is passed without Workspace Folder, no workspaces and non python file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver Launch Defaults should be returned when an empty object is passed without Workspace Folder, with a workspace and an active python file",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver Launch Ensure `${config:python.pythonPath}` is replaced with actual pythonPath",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Ensure hardcoded pythonPath is left unaltered",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Launch Test defaults of debugger",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Test defaults of python debugger",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Launch Test overriding defaults of debugger",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Ensure justMyCode property is correctly derived from debugStdLib",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Test fixFilePathCase for Windows",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Test fixFilePathCase for Linux",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Test fixFilePathCase for Mac",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Jinja added for Pyramid",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Auto detect flask debugging",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Launch Test validation of Python Path when launching debugger (with invalid python path)",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver Launch Test validation of Python Path when launching debugger (with valid python path)",
    "time": 0.002
  },
  {
    "name": "Debugging - Config Resolver Launch Must not contain Sub Process when not specified (launch)",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Must not contain Sub Process setting=false (launch)",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Must not contain Sub Process setting=true (launch)",
    "time": 0.001
  },
  {
    "name": "Debugging - Config Resolver Launch Must not contain Sub Process when not specified (attach)",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Launch Must not contain Sub Process setting=false (attach)",
    "time": 0
  },
  {
    "name": "Debugging - Config Resolver Launch Must not contain Sub Process setting=true (attach)",
    "time": 0.001
  },
  {
    "name": "Debug - Child Process Do not attach to child process if event is invalid",
    "time": 0
  },
  {
    "name": "Debug - Child Process Do not attach to child process if event is invalid",
    "time": 0
  },
  {
    "name": "Debug - Child Process Exceptions are not bubbled up if data is invalid",
    "time": 0
  },
  {
    "name": "Debug - Child Process Exceptions are not bubbled up if exceptions are thrown",
    "time": 0
  },
  {
    "name": "Debug - Attach to Child Process Message is not displayed if debugger is launched",
    "time": 0.001
  },
  {
    "name": "Debug - Attach to Child Process Message is displayed if debugger is not launched",
    "time": 0.001
  },
  {
    "name": "Debug - Attach to Child Process Use correct workspace folder",
    "time": 0.446
  },
  {
    "name": "Debug - Attach to Child Process Use empty workspace folder if right one is not found",
    "time": 0.433
  },
  {
    "name": "Debug - Attach to Child Process Validate debug config when parent/root parent was launched",
    "time": 0.001
  },
  {
    "name": "Debug - Attach to Child Process Validate debug config when parent/root parent was attached",
    "time": 0.001
  },
  {
    "name": "Debug - Attach to Child Process Path mappings are not set when there is no workspace folder",
    "time": 0
  },
  {
    "name": "Debug - Attach to Child Process Path mappings are left untouched when they are provided",
    "time": 0
  },
  {
    "name": "Debug - Attach to Child Process Path mappings default to workspace folder",
    "time": 0.433
  },
  {
    "name": "Debug - Attach to Child Process Path mappings default to cwd folder",
    "time": 0.409
  },
  {
    "name": "Debug - Attach to Child Process Path mappings default to cwd folder relative to workspace folder",
    "time": 0.407
  },
  {
    "name": "Debugging - Service Registry Registrations",
    "time": 0.002
  },
  {
    "name": "Extension API Debugger Test debug launcher args (no-wait)",
    "time": 0.001
  },
  {
    "name": "Extension API Debugger Test debug launcher args (wait)",
    "time": 0.001
  },
  {
    "name": "Formatting - Test Arguments Ensure blackPath and args used to launch the formatter",
    "time": 0.001
  },
  {
    "name": "Formatting - Test Arguments Ensure black modulename and args used to launch the formatter",
    "time": 0
  },
  {
    "name": "Formatting - Test Arguments Ensure autopep8path and args used to launch the formatter",
    "time": 0.001
  },
  {
    "name": "Formatting - Test Arguments Ensure autpep8 modulename and args used to launch the formatter",
    "time": 0.001
  },
  {
    "name": "Formatting - Test Arguments Ensure yapfpath and args used to launch the formatter",
    "time": 0.001
  },
  {
    "name": "Formatting - Test Arguments Ensure yapf modulename and args used to launch the formatter",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Unknown os will return empty variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Windows getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Windows Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Windows Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Windows Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Windows Error must be swallowed when activation fails",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Windows Return parsed variables",
    "time": 0.002
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource OSX getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource OSX Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource OSX Validate env Vars used to activation and printing env vars",
    "time": 0.002
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource OSX Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource OSX Error must be swallowed when activation fails",
    "time": 0.002
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource OSX Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Linux getEnvironmentActivationShellCommands will be invoked",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Linux Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Linux Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Linux Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Linux Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource Linux Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Unknown os will return empty variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Windows getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Windows Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Windows Validate env Vars used to activation and printing env vars",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Windows Use current process variables if there are no custom variables",
    "time": 0.002
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Windows Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Windows Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter OSX getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter OSX Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter OSX Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter OSX Use current process variables if there are no custom variables",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter OSX Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter OSX Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Linux getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Linux Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Linux Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Linux Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Linux Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables Without a resource and an interpreter Linux Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Unknown os will return empty variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Windows getEnvironmentActivationShellCommands will be invoked",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Windows Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Windows Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Windows Use current process variables if there are no custom variables",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Windows Error must be swallowed when activation fails",
    "time": 0.003
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Windows Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource OSX getEnvironmentActivationShellCommands will be invoked",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource OSX Validate command used to activation and printing env vars",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource OSX Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource OSX Use current process variables if there are no custom variables",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource OSX Error must be swallowed when activation fails",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource OSX Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Linux getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Linux Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Linux Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Linux Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Linux Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource Linux Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Unknown os will return empty variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Windows getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Windows Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Windows Validate env Vars used to activation and printing env vars",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Windows Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Windows Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Windows Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter OSX getEnvironmentActivationShellCommands will be invoked",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter OSX Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter OSX Validate env Vars used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter OSX Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter OSX Error must be swallowed when activation fails",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter OSX Return parsed variables",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Linux getEnvironmentActivationShellCommands will be invoked",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Linux Validate command used to activation and printing env vars",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Linux Validate env Vars used to activation and printing env vars",
    "time": 0
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Linux Use current process variables if there are no custom variables",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Linux Error must be swallowed when activation fails",
    "time": 0.001
  },
  {
    "name": "Interprters Activation - Python Environment Variables With a resource and an interpreter Linux Return parsed variables",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection Instance is registered in proxy",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Rules are chained in order of preference",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Run rules in background",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection Run userDefineInterpreter as the first rule",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection Initialize the store",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Initializing the store would be executed once",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Clear file stored in cache if it doesn&apos;t exist",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Should not clear file stored in cache if it does exist",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Store interpreter info in state store when resource is undefined",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Do not store global interpreter info in state store when resource is undefined and version is lower than one already in state",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Store global interpreter info in state store when resource is undefined and version is higher than one already in state",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Store global interpreter info in state store",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Store interpreter info in state store when resource is defined",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Storing workspace interpreter info in state store should fail",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Store workspace interpreter info in state store",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Return undefined when we do not have a global value",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection Return global value if we do not have a matching value for the resource",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Proxy Change evnet is fired",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should return undefined when instance isn&apos;t registered (without a resource)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should invoke instance method when instance isn&apos;t registered (without a resource)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should return undefined when instance isn&apos;t registered (with a resource)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection Proxy getAutoSelectedInterpreter should invoke instance method when instance isn&apos;t registered (with a resource)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule State store is created",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule Next rule should be invoked",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule Next rule should not be invoked",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule State store must be updated",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule State store must be cleared when file does not exist",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule State store must not be cleared when file exists",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule Get undefined if there&apos;s nothing in state store",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule Get value from state store",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule setGlobalInterpreter should do nothing if interprter is undefined or version is empty",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule setGlobalInterpreter should not update manager if interpreter is not better than one stored in manager",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Base Rule setGlobalInterpreter should update manager if interpreter is better than one stored in manager",
    "time": 0.002
  },
  {
    "name": "Interpreters - Auto Selection - Cached Rule Invoke next rule if there are no cached interpreters",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Cached Rule Invoke next rule if fails to update global state",
    "time": 0.005
  },
  {
    "name": "Interpreters - Auto Selection - Cached Rule Must not Invoke next rule if updating global state is successful",
    "time": 0.003
  },
  {
    "name": "Interpreters - Auto Selection - Current Path Rule Invoke next rule if there are no interpreters in the current path",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Current Path Rule Invoke next rule if fails to update global state",
    "time": 0.003
  },
  {
    "name": "Interpreters - Auto Selection - Current Path Rule Not Invoke next rule if succeeds to update global state",
    "time": 0.004
  },
  {
    "name": "Interpreters - Auto Selection - Settings Rule Invoke next rule if python Path in user settings is default",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Settings Rule Invoke next rule if python Path in user settings is not defined",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Settings Rule Must not Invoke next rule if python Path in user settings is not default",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - System Interpreters Rule Invoke next rule if there are no interpreters in the current path",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - System Interpreters Rule Invoke next rule if there interpreters in the current path but update fails",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - System Interpreters Rule Do not Invoke next rule if there interpreters in the current path and update does not fail",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Windows Registry Rule Invoke next rule if platform is not windows (Unknown)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Windows Registry Rule Invoke next rule if platform is not windows (OSX)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Windows Registry Rule Invoke next rule if platform is not windows (Linux)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Windows Registry Rule Invoke next rule if there are no interpreters in the registry",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Windows Registry Rule Invoke next rule if there are interpreters in the registry and update fails",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Windows Registry Rule Do not Invoke next rule if there are interpreters in the registry and update does not fail",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Invoke next rule if there is no workspace",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Invoke next rule if resource is undefined",
    "time": 0.002
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Invoke next rule if user has defined a python path in settings",
    "time": 0.007
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Does not update settings when there is no interpreter",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Does not update settings when there is not workspace",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Update settings",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will not return any interpreters if there is no workspace",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will not return any interpreters if interpreters are not in workspace folder (windows)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will return workspace related virtual interpreters (windows)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will not return any interpreters if interpreters are not in workspace folder (OSX)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will return workspace related virtual interpreters (OSX)",
    "time": 0
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will not return any interpreters if interpreters are not in workspace folder (Linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule getWorkspaceVirtualEnvInterpreters will return workspace related virtual interpreters (Linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Invoke next rule if there is no workspace",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Invoke next rule if there is no resouece",
    "time": 0.001
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Use pipEnv if that completes first with results",
    "time": 0.002
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Use virtualEnv if that completes first with results",
    "time": 0.002
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Wait for virtualEnv if pipEnv completes without any interpreters",
    "time": 0.012
  },
  {
    "name": "Interpreters - Auto Selection - Workspace Virtual Envs Rule Wait for pipEnv if VirtualEnv completes without any interpreters",
    "time": 0.002
  },
  {
    "name": "Interpreters from Conda Environments Text File Must return an empty list if environment file cannot be found",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Text File Must return an empty list for an empty file",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Text File Must filter files in the list and return valid items (non windows)",
    "time": 0.002
  },
  {
    "name": "Interpreters from Conda Environments Text File Must filter files in the list and return valid items (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must return an empty list for empty json",
    "time": 0
  },
  {
    "name": "Interpreters from Conda Environments Must extract display name from version info (non windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must extract display name from version info (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must extract display name from version info suffixed with the environment name (oxs/linux)",
    "time": 0.002
  },
  {
    "name": "Interpreters from Conda Environments Must extract display name from version info suffixed with the environment name (windows)",
    "time": 0.002
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is invalid (non windows)",
    "time": 0
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is invalid (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is invalid and suffixed with environment name (non windows)",
    "time": 0.002
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is invalid and suffixed with environment name (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is empty (non windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is empty (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is empty and suffixed with environment name (non windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must use the default display name if sys.version is empty and suffixed with environment name (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must include the default_prefix into the list of interpreters (non windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters from Conda Environments Must include the default_prefix into the list of interpreters (windows)",
    "time": 0
  },
  {
    "name": "Interpreters from Conda Environments Must exclude interpreters that do not exist on disc (non windows)",
    "time": 0.004
  },
  {
    "name": "Interpreters from Conda Environments Must exclude interpreters that do not exist on disc (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters display name from Conda Environments Must return default display name for invalid Conda Info",
    "time": 0.001
  },
  {
    "name": "Interpreters display name from Conda Environments Must return at least Python Version",
    "time": 0
  },
  {
    "name": "Interpreters display name from Conda Environments Must return info without first part if not a python version",
    "time": 0
  },
  {
    "name": "Interpreters display name from Conda Environments Must return info without prefixing with word &apos;Python&apos;",
    "time": 0
  },
  {
    "name": "Interpreters display name from Conda Environments Must include Ananconda name if Company name not found",
    "time": 0
  },
  {
    "name": "Interpreters display name from Conda Environments Parse conda environments",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly identifies a python path as a conda environment (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Correctly identifies a python path as a conda environment (linux)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly identifies a python path as a conda environment (osx)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly identifies a python path as a non-conda environment (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Correctly identifies a python path as a non-conda environment (linux)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly identifies a python path as a non-conda environment (osx)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly retrieves conda environment (windows)",
    "time": 0.002
  },
  {
    "name": "Interpreters Conda Service Correctly retrieves conda environment with spaces in env name (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Correctly retrieves conda environment (osx)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly retrieves conda environment with spaces in env name (osx)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Correctly retrieves conda environment (linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Correctly retrieves conda environment with spaces in env name (linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Ignore cache if environment is not found in the cache (conda env is detected second time round)",
    "time": 0.002
  },
  {
    "name": "Interpreters Conda Service Ignore cache if environment is not found in the cache (cond env is not detected in conda env list)",
    "time": 0.002
  },
  {
    "name": "Interpreters Conda Service Must use Conda env from Registry to locate conda.exe",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must use Conda env from Registry to latest version of locate conda.exe",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must use &apos;conda&apos; if conda.exe cannot be located using registry entries",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Get conda file from default/known locations",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must use &apos;python.condaPath&apos; setting if set",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must use &apos;conda&apos; if is available in the current path",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must invoke process only once to check if conda is in the current path",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must return conda path from known location &apos;~/anaconda/bin/conda&apos; (non windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must return conda path from known location &apos;~/miniconda/bin/conda&apos; (non windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must return conda path from known location &apos;~/anaconda2/bin/conda&apos; (non windows)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Must return conda path from known location &apos;~/miniconda2/bin/conda&apos; (non windows)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Must return conda path from known location &apos;~/anaconda3/bin/conda&apos; (non windows)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Must return conda path from known location &apos;~/miniconda3/bin/conda&apos; (non windows)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Must return &apos;conda&apos; if conda could not be found in known locations",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly identify interpreter location relative to entironment path (non windows)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Correctly identify interpreter location relative to entironment path (windows)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Returns condaInfo when conda exists",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Returns undefined if there&apos;s and error in getting the info",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Returns conda environments when conda exists",
    "time": 0.446
  },
  {
    "name": "Interpreters Conda Service Logs information message when conda does not exist",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Returns cached conda environments",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Subsequent list of environments will be retrieved from cache",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Returns undefined if there&apos;s and error in getting the info",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Must use Conda env from Registry to locate conda.exe",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service isAvailable will return true if conda is available",
    "time": 0.002
  },
  {
    "name": "Interpreters Conda Service isAvailable will return false if conda is not available",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Version info from conda process will be returned in getCondaVersion",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service isCondaInCurrentPath will return true if conda is available",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service isCondaInCurrentPath will return false if conda is not available",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Fails to identify an environment as a conda env (windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Fails to identify an environment as a conda env (linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Fails to identify an environment as a conda env (osx)",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for subenvironment test1",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for different test1",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for subenvironment test2",
    "time": 0.001
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for different test2",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for subenvironment test3",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for different test3",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for subenvironment test4",
    "time": 0
  },
  {
    "name": "Interpreters Conda Service Finds conda.exe for different test4",
    "time": 0
  },
  {
    "name": "Interpreters CurrentPath Service Interpreters that do not exist on the file system are not excluded from the list (windows)",
    "time": 0.005
  },
  {
    "name": "Interpreters CurrentPath Service Interpreters that do not exist on the file system are not excluded from the list (not windows)",
    "time": 0.002
  },
  {
    "name": "Interpreters Display Sattusbar must be created and have command name initialized",
    "time": 0.001
  },
  {
    "name": "Interpreters Display Display name and tooltip must come from interpreter info",
    "time": 0.001
  },
  {
    "name": "Interpreters Display If interpreter is not identified then tooltip should point to python Path",
    "time": 0.001
  },
  {
    "name": "Interpreters Display If interpreter file does not exist then update status bar accordingly",
    "time": 0.001
  },
  {
    "name": "Interpreters Display Ensure we try to identify the active workspace when a resource is not provided",
    "time": 0.001
  },
  {
    "name": "Interpreters - Interpreter Selection Tip Do not show tip",
    "time": 0
  },
  {
    "name": "Interpreters - Interpreter Selection Tip Show tip and do not track it",
    "time": 0.001
  },
  {
    "name": "Interpreters - Interpreter Selection Tip Show tip and track it",
    "time": 0.001
  },
  {
    "name": "Interpreters - Display Progress Display loading message when refreshing interpreters for the first time",
    "time": 0.001
  },
  {
    "name": "Interpreters - Display Progress Display refreshing message when refreshing interpreters for the second time",
    "time": 0.002
  },
  {
    "name": "Interpreters - Display Progress Progress message is hidden when loading has completed",
    "time": 0.001
  },
  {
    "name": "Interpreters Display Helper getActiveWorkspaceUri should return undefined if there are no workspaces",
    "time": 0
  },
  {
    "name": "Interpreters Display Helper getActiveWorkspaceUri should return the workspace if there is only one",
    "time": 0
  },
  {
    "name": "Interpreters Display Helper getActiveWorkspaceUri should return undefined if we no active editor and have more than one workspace folder",
    "time": 0.001
  },
  {
    "name": "Interpreters Display Helper getActiveWorkspaceUri should return undefined of the active editor does not belong to a workspace and if we have more than one workspace folder",
    "time": 0.001
  },
  {
    "name": "Interpreters Display Helper getActiveWorkspaceUri should return workspace folder of the active editor if belongs to a workspace and if we have more than one workspace folder",
    "time": 0.004
  },
  {
    "name": "Interpreters Display Helper getBestInterpreter should return undefined for an empty list",
    "time": 0
  },
  {
    "name": "Interpreters Display Helper getBestInterpreter should return first item if there is only one",
    "time": 0
  },
  {
    "name": "Interpreters Display Helper getBestInterpreter should return interpreter with highest version",
    "time": 0
  },
  {
    "name": "Interpreters service Misc Refresh invokes refresh of display (without a resource)",
    "time": 0.002
  },
  {
    "name": "Interpreters service Misc get Interpreters uses interpreter locactors to get interpreters (without a resource)",
    "time": 0.001
  },
  {
    "name": "Interpreters service Misc Refresh invokes refresh of display (with a resource)",
    "time": 0.001
  },
  {
    "name": "Interpreters service Misc get Interpreters uses interpreter locactors to get interpreters (with a resource)",
    "time": 0.001
  },
  {
    "name": "Interpreters service Misc Changes to active document should invoke interpreter.refresh method",
    "time": 0.001
  },
  {
    "name": "Interpreters service Misc If there is no active document then interpreter.refresh should not be invoked",
    "time": 0
  },
  {
    "name": "Interpreters service Get Interpreter Details Ensure undefined is returned if we&apos;re unable to retrieve interpreter info (Resource is undefined)",
    "time": 1.003
  },
  {
    "name": "Interpreters service Get Interpreter Details Ensure undefined is returned if we&apos;re unable to retrieve interpreter info (Resource is some workspace)",
    "time": 1.009
  },
  {
    "name": "Interpreters service Caching Display name Return cached display name",
    "time": 0.005
  },
  {
    "name": "Interpreters service Caching Display name Cached display name is not used if file hashes differ",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, Unknown architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.004
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x86 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.003
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, x64 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.006
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, without version information, without architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.004
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, Unknown architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x86 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, x64 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) Without a workspace, with version information, without architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.004
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, Unknown architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x86 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.005
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, x64 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, without version information, without architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, Unknown architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x86 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.002
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, x64 architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, without interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, without interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, without python Path, without interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Unknown interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Unknown interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Unknown interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Unknown interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Conda interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Conda interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Conda interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Conda interpreter type, with environment name, with pip environment",
    "time": 0.005
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, VirtualEnv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, PipEnv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, without environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, with environment name, without pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Pyenv interpreter type, with environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Venv interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Venv interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Venv interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, Venv interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, without interpreter type, without environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, without interpreter type, without environment name, with pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, without interpreter type, with environment name, without pip environment",
    "time": 0
  },
  {
    "name": "Interpreters service Display Format (with all permutations) With a workspace, with version information, without architecture, with python Path, without interpreter type, with environment name, with pip environment",
    "time": 0.001
  },
  {
    "name": "Interpreters service Interprter Cache Ensure cache is returned",
    "time": 0.001
  },
  {
    "name": "Interpreters service Interprter Cache Ensure cache is cleared if file hash is different",
    "time": 0.001
  },
  {
    "name": "Interpreters display version Must return the Python Version",
    "time": 0.001
  },
  {
    "name": "Interpreters display version Must return the default value when Python path is invalid",
    "time": 0.001
  },
  {
    "name": "Interpreters display version Must return the pip Version.",
    "time": 0.001
  },
  {
    "name": "Interpreters display version Must throw an exception when pip version cannot be determined",
    "time": 0.001
  },
  {
    "name": "Interpreters Known Paths Ensure known list of paths are returned",
    "time": 0.001
  },
  {
    "name": "Interpreters Known Paths Ensure known list of paths are returned on non-windows",
    "time": 0.001
  },
  {
    "name": "Interpreters Known Paths Ensure PATH variable and known list of paths are merged on non-windows",
    "time": 0.001
  },
  {
    "name": "Interpreters - Cacheable Locator Service Caching Interpreters must be retrieved once, then cached",
    "time": 0.001
  },
  {
    "name": "Interpreters - Cacheable Locator Service Caching Ensure onDidCreate event handler is attached",
    "time": 0.001
  },
  {
    "name": "Interpreters - Cacheable Locator Service Caching Ensure cache is cleared when watcher event fires",
    "time": 0.001
  },
  {
    "name": "Interpreters - Cacheable Locator Service Caching Ensure locating event is raised",
    "time": 0.001
  },
  {
    "name": "Interpreters - Cacheable Locator Service Cache Key Cache Key must contain name of locator",
    "time": 0
  },
  {
    "name": "Interpreters - Cacheable Locator Service Cache Key Cache Key must not contain path to workspace",
    "time": 0
  },
  {
    "name": "Interpreters - Cacheable Locator Service Cache Key Cache Key must contain path to workspace",
    "time": 0.001
  },
  {
    "name": "Interpreters - Locators Helper Ensure default Mac interpreter is not excluded from the list of interpreters",
    "time": 0.002
  },
  {
    "name": "Interpreters - Locators Helper Ensure duplicates are removed (same version and same interpreter directory on Windows)",
    "time": 0.002
  },
  {
    "name": "Interpreters - Locators Helper Ensure duplicates are removed (same version and same interpreter directory on Linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Locators Helper Ensure duplicates are removed (same version and same interpreter directory on Mac)",
    "time": 0.002
  },
  {
    "name": "Interpreters - Locators Helper Ensure interpreter types are identified from other locators (Windows)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Locators Helper Ensure interpreter types are identified from other locators (Linux)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Locators Helper Ensure interpreter types are identified from other locators (Mac)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Locators Index All Interpreter Sources are used (on Windows, without a resource)",
    "time": 0.006
  },
  {
    "name": "Interpreters - Locators Index Interpreter Sources are sorted correctly and merged (on Windows, without a resource)",
    "time": 0.007
  },
  {
    "name": "Interpreters - Locators Index All Interpreter Sources are used (on OSX, without a resource)",
    "time": 0.002
  },
  {
    "name": "Interpreters - Locators Index Interpreter Sources are sorted correctly and merged (on OSX, without a resource)",
    "time": 0.003
  },
  {
    "name": "Interpreters - Locators Index All Interpreter Sources are used (on Linux, without a resource)",
    "time": 0.002
  },
  {
    "name": "Interpreters - Locators Index Interpreter Sources are sorted correctly and merged (on Linux, without a resource)",
    "time": 0.004
  },
  {
    "name": "Interpreters - Locators Index All Interpreter Sources are used (on Windows, with a resource)",
    "time": 0.004
  },
  {
    "name": "Interpreters - Locators Index Interpreter Sources are sorted correctly and merged (on Windows, with a resource)",
    "time": 0.004
  },
  {
    "name": "Interpreters - Locators Index All Interpreter Sources are used (on OSX, with a resource)",
    "time": 0.003
  },
  {
    "name": "Interpreters - Locators Index Interpreter Sources are sorted correctly and merged (on OSX, with a resource)",
    "time": 0.003
  },
  {
    "name": "Interpreters - Locators Index All Interpreter Sources are used (on Linux, with a resource)",
    "time": 0.004
  },
  {
    "name": "Interpreters - Locators Index Interpreter Sources are sorted correctly and merged (on Linux, with a resource)",
    "time": 0.002
  },
  {
    "name": "Interpreters - Watcher Builder Build Workspace Virtual Env Watcher",
    "time": 0.001
  },
  {
    "name": "Interpreters - Watcher Builder Ensure we cache Workspace Virtual Env Watcher",
    "time": 0
  },
  {
    "name": "Interpreters - Locator Progress Must raise refreshing event",
    "time": 0.001
  },
  {
    "name": "Interpreters - Locator Progress Must raise refreshed event",
    "time": 0.01
  },
  {
    "name": "Interpreters - Locator Progress Must raise refreshed event only when all locators have completed",
    "time": 0.032
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Service Get list of watchers",
    "time": 0.001
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on windows",
    "time": 0.001
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Mac",
    "time": 0.001
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Linux",
    "time": 0
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on windows",
    "time": 0
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Mac",
    "time": 0.001
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Linux",
    "time": 0
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on windows  (with resource &amp; with workspace folder)",
    "time": 0
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Mac  (with resource &amp; with workspace folder)",
    "time": 0
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Linux  (with resource &amp; with workspace folder)",
    "time": 0
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on windows  (with resource &amp; without workspace folder)",
    "time": 0.006
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Mac  (with resource &amp; without workspace folder)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Register for file changes on Linux  (with resource &amp; without workspace folder)",
    "time": 0.001
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Check file change handler on Windows",
    "time": 0.012
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Check file change handler on Mac",
    "time": 0.012
  },
  {
    "name": "Interpreters - Workspace VirtualEnv Watcher Service Check file change handler on Linux",
    "time": 0.011
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list&apos; (Mac, without a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list if there is no &apos;PipFile&apos; (Mac, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --version&apos; fails  (Mac, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --venv&apos; fails with stderr  (Mac, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information (Mac, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information using PipFile defined in Env variable (Mac, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Must use &apos;python.pipenvPath&apos; setting",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list&apos; (Mac, with a workspace)",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list if there is no &apos;PipFile&apos; (Mac, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --version&apos; fails  (Mac, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --venv&apos; fails with stderr  (Mac, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information (Mac, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information using PipFile defined in Env variable (Mac, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Must use &apos;python.pipenvPath&apos; setting",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list&apos; (Windows, without a workspace)",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list if there is no &apos;PipFile&apos; (Windows, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --version&apos; fails  (Windows, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --venv&apos; fails with stderr  (Windows, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information (Windows, without a workspace)",
    "time": 0.003
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information using PipFile defined in Env variable (Windows, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Must use &apos;python.pipenvPath&apos; setting",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list&apos; (Windows, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list if there is no &apos;PipFile&apos; (Windows, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --version&apos; fails  (Windows, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --venv&apos; fails with stderr  (Windows, with a workspace)",
    "time": 0.003
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information (Windows, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information using PipFile defined in Env variable (Windows, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Must use &apos;python.pipenvPath&apos; setting",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list&apos; (Linux, without a workspace)",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list if there is no &apos;PipFile&apos; (Linux, without a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --version&apos; fails  (Linux, without a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --venv&apos; fails with stderr  (Linux, without a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information (Linux, without a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information using PipFile defined in Env variable (Linux, without a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Must use &apos;python.pipenvPath&apos; setting",
    "time": 0
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list&apos; (Linux, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should return an empty list if there is no &apos;PipFile&apos; (Linux, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --version&apos; fails  (Linux, with a workspace)",
    "time": 0.003
  },
  {
    "name": "Interpreters - PipEnv Should display warning message if there is a &apos;PipFile&apos; but &apos;pipenv --venv&apos; fails with stderr  (Linux, with a workspace)",
    "time": 0.001
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information (Linux, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Should return interpreter information using PipFile defined in Env variable (Linux, with a workspace)",
    "time": 0.002
  },
  {
    "name": "Interpreters - PipEnv Must use &apos;python.pipenvPath&apos; setting",
    "time": 0
  },
  {
    "name": "Virtual environments Global search paths",
    "time": 0.001
  },
  {
    "name": "Virtual environments Global search paths with duplicates",
    "time": 0.001
  },
  {
    "name": "Virtual environments Global search paths with tilde path in the WORKON_HOME environment variable",
    "time": 0.001
  },
  {
    "name": "Virtual environments Global search paths with absolute path in the WORKON_HOME environment variable",
    "time": 0.001
  },
  {
    "name": "Virtual environments Workspace search paths",
    "time": 0.002
  },
  {
    "name": "Virtual environment manager Plain Python environment suffix",
    "time": 0.001
  },
  {
    "name": "Virtual environment manager Plain Python environment suffix with workspace Uri",
    "time": 0
  },
  {
    "name": "Virtual environment manager Plain Python environment suffix with PipEnv",
    "time": 0
  },
  {
    "name": "Virtual environment manager Use environment folder as env name",
    "time": 0
  },
  {
    "name": "Virtual environment manager Use workspacec name as env name",
    "time": 0
  },
  {
    "name": "Virtual Environment Manager Get PyEnv Root from PYENV_ROOT",
    "time": 0
  },
  {
    "name": "Virtual Environment Manager Get PyEnv Root from current PYENV_ROOT",
    "time": 0
  },
  {
    "name": "Virtual Environment Manager Get default PyEnv Root path",
    "time": 0
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, detects venv",
    "time": 0
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, does not detect venv incorrectly",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, detects pyenv",
    "time": 0
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, does not detect pyenv incorrectly",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, detects pipenv",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, does not detect pipenv incorrectly",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, detects virtualenv (On Windows})",
    "time": 0.002
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, does not detect virtualenv incorrectly (On Windows})",
    "time": 0.002
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, detects virtualenv (Non-Windows})",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, does not detect virtualenv incorrectly (Non-Windows})",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Manager Get Environment Type, does not detect the type",
    "time": 0
  },
  {
    "name": "Virtual Environment Prompt User is not notified if python path is specified in settings.json",
    "time": 1.002
  },
  {
    "name": "Virtual Environment Prompt User is notified if interpreter exists and only python path to global interpreter is specified in settings",
    "time": 1.006
  },
  {
    "name": "Virtual Environment Prompt If user selects &apos;Yes&apos;, python path is updated",
    "time": 0.002
  },
  {
    "name": "Virtual Environment Prompt If user selects &apos;No&apos;, no operation is performed",
    "time": 0.004
  },
  {
    "name": "Virtual Environment Prompt If user selects &apos;Do not show again&apos;, prompt is disabled",
    "time": 0.002
  },
  {
    "name": "Virtual Environment Prompt If prompt is disabled, no notification is shown",
    "time": 0
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns false when workspace folder setting equals &apos;python&apos;",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns true when interpreter is provided in workspace folder setting",
    "time": 0
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns false when workspace setting equals &apos;python&apos;",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns true when interpreter is provided in workspace setting",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns false when global setting equals &apos;python&apos;",
    "time": 0.001
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns false when interpreter is provided in global setting",
    "time": 0
  },
  {
    "name": "Virtual Environment Prompt Function hasUserDefinedPythonPath() Returns false when no python setting is provided",
    "time": 0.001
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return an empty list (x86)",
    "time": 0.002
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return an empty list (x64)",
    "time": 0
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return a single entry",
    "time": 0.003
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must default names for PythonCore and exe",
    "time": 0.001
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must ignore company &apos;PyLauncher&apos;",
    "time": 0
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return a single entry and when registry contains only the InstallPath",
    "time": 0.001
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return multiple entries",
    "time": 0.001
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return multiple entries excluding the invalid registry items and duplicate paths",
    "time": 0.002
  },
  {
    "name": "Interpreters from Windows Registry (unit) Must return multiple entries excluding the invalid registry items and nonexistent paths",
    "time": 0.002
  },
  {
    "name": "Language Configuration &quot;brackets&quot; brackets is not defined",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;comments&quot; comments is not defined",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;indentationRules&quot; indentationRules is not defined",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Multiline separator indent regex should not pick up strings with no multiline separator",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Multiline separator indent regex should not pick up strings with escaped characters",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Multiline separator indent regex should pick up strings ending with a multiline separator",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self):&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tasync def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tasync def test(self):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xasync def test(self):&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  def test(self):&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self) :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self) :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self):# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self):# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def test(self): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def test(self): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tasync def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tasync def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xasync def :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  def :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async def : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async def : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    async :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    async :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   async :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   async :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tasync :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tasync :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xasync :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;asyncx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;async : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;async : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    class Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    class Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   class Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   class Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tclass Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tclass Test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xclass Test:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;classx  Test:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    class Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    class Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   class Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   class Test(object):&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tclass Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tclass Test(object):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xclass Test(object):&quot; ignored (look-alike - pre-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;classx  Test(object):&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object) :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object) :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object):# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object):# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class Test(object): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class Test(object): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    class :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    class :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   class :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   class :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tclass :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tclass :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xclass :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;classx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;class : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;class : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    def spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    def spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   def spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   def spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tdef spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tdef spam():&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xdef spam():&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;defx  spam():&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam() :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam() :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(): &quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam():# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam():# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    def spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    def spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   def spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   def spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tdef spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tdef spam(self, node, namespace=&quot;&quot;):&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xdef spam(self, node, namespace=&quot;&quot;):&quot; ignored (look-alike - pre-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;defx  spam(self, node, namespace=&quot;&quot;):&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;) :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;) :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;):# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def spam(self, node, namespace=&quot;&quot;): # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   def :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tdef :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tdef :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xdef :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;defx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;def : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;def : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    for item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    for item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   for item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   for item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tfor item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tfor item in items:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xfor item in items:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;forx  item in items:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in items: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in items: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    for item in :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    for item in :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   for item in :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   for item in :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tfor item in :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tfor item in :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xfor item in :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;forx  item in :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for item in : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for item in : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    for :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    for :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   for :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   for :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tfor :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tfor :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xfor :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;forx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for  :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;for : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;for : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    if foo is None:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    if foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   if foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   if foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tif foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tif foo is None:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xif foo is None:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;ifx  foo is None:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if foo is None: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if foo is None: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    if :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    if :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   if :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   if :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xif :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;ifx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;if : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;if : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    try:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    try:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   try:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   try:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\ttry:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\ttry:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xtry:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;tryx:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try:# a comment&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;try: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;try: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    while &apos;::&apos; in macaddress:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    while &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   while &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   while &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\twhile &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\twhile &apos;::&apos; in macaddress:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xwhile &apos;::&apos; in macaddress:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;whilex  &apos;::&apos; in macaddress:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while &apos;::&apos; in macaddress: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while &apos;::&apos; in macaddress: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    while :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    while :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   while :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   while :&quot;",
    "time": 0.002
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\twhile :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\twhile :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xwhile :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;whilex  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while  :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;while : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;while : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    with self.test:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    with self.test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   with self.test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   with self.test:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\twith self.test:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\twith self.test:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xwith self.test:&quot; ignored (look-alike - pre-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;withx  self.test:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with self.test: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with self.test: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    with :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    with :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   with :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   with :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\twith :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\twith :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xwith :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;withx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;with : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;with : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    elif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    elif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   elif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   elif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\telif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\telif x &lt; 5:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xelif x &lt; 5:&quot; ignored (look-alike - pre-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;elifx  x &lt; 5:&quot; ignored (look-alike - post-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5 :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5 :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif x &lt; 5: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif x &lt; 5: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    elif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    elif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   elif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   elif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\telif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\telif :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xelif :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;elifx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif :# a comment&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;elif : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;elif : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    else:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    else:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   else:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   else:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\telse:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\telse:&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xelse:&quot; ignored (look-alike - pre-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;elsex:&quot; ignored (look-alike - post-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else:# a comment&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;else: # ...&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;else: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    except TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    except TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   except TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   except TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\texcept TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\texcept TestError:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xexcept TestError:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;exceptx  TestError:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except TestError: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except TestError: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    except :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    except :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   except :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   except :&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\texcept :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\texcept :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xexcept :&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;exceptx  :&quot; ignored (look-alike - post-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except  :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except : &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except :# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;except : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;except : # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    finally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    finally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   finally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   finally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tfinally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tfinally:&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xfinally:&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;finallyx:&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally :&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally: &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally:# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;finally: # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;finally: # ...&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    pass&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    pass&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   pass&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   pass&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tpass&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tpass&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xpass&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;passx&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass &quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;pass # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;pass # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    raise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    raise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   raise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   raise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\traise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\traise Exception(msg)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xraise Exception(msg)&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raisex  Exception(msg)&quot; ignored (look-alike - post-keyword)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception(msg) &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception(msg) &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception(msg)# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception(msg)# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception(msg) # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception(msg) # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    raise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    raise Exception&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   raise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   raise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\traise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\traise Exception&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xraise Exception&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raisex  Exception&quot; ignored (look-alike - post-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception &quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception# a comment&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;raise Exception # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;raise Exception # ...&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raise&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    raise&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    raise&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   raise&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   raise&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\traise&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\traise&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xraise&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raisex&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raise &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raise# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;raise # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;break&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    break&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    break&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   break&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   break&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tbreak&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tbreak&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xbreak&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;breakx&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;break &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;break# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;break # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;continue&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    continue&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    continue&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   continue&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   continue&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\tcontinue&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\tcontinue&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xcontinue&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;continuex&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;continue &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;continue# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;continue # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return True&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return True&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return True&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return True&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return True&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn True&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn True&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn True&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  True&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return True &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return True# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return True # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False)&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return (True, False, False)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return (True, False, False)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return (True, False, False)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return (True, False, False)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn (True, False, False)&quot;",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn (True, False, False)&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn (True, False, False)&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  (True, False, False)&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False) &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False)# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return (True, False, False) # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False]&quot; ignored (expected indent)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return [True, False, False]&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return [True, False, False]&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return [True, False, False]&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return [True, False, False]&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn [True, False, False]&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn [True, False, False]&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn [True, False, False]&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  [True, False, False]&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False] &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False]# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [True, False, False] # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False}&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return {True, False, False}&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return {True, False, False}&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return {True, False, False}&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return {True, False, False}&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn {True, False, False}&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn {True, False, False}&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn {True, False, False}&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  {True, False, False}&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False} &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False}# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return {True, False, False} # ...&quot; ignored (expected indent)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return (&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return (&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return (&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return (&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return (&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn (&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn (&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn (&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  (&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return ( &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return (# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return ( # ...&quot; ignored (expected indent)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return [&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return [&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return [&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return [&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn [&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn [&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn [&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  [&quot; ignored (expected indent)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [ &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return [ # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return {&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return {&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return {&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return {&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return {&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn {&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn {&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn {&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx  {&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return { &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return {# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return { # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;    return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;    return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;   return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;   return&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check indent-on-enter for line &quot;\t\treturn&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Check dedent-on-enter for line &quot;\t\treturn&quot;",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;xreturn&quot; ignored (look-alike - pre-keyword)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;returnx&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return &quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return# a comment&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;return # ...&quot; ignored (expected indent)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;    &quot; ignored (blank line)",
    "time": 0.001
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;   &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;\t\t&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;x&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;x&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot; &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;# a comment&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot; # ...&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot; &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;     &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;    &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;\t\t &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;x &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;x  &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;  &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot; # a comment&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;  # ...&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;  &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;      &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;     &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;\t\t  &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;x  &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;x   &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;   &quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;  # a comment&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;onEnterRules&quot; Line &quot;   # ...&quot; ignored (blank line)",
    "time": 0
  },
  {
    "name": "Language Configuration &quot;wordPattern&quot; wordPattern is not defined",
    "time": 0
  },
  {
    "name": "Completion Provider Ensure docs are provided when &apos;addBrackets&apos; setting is false",
    "time": 0.005
  },
  {
    "name": "Completion Provider Ensure docs are provided when &apos;addBrackets&apos; setting is true",
    "time": 0.002
  },
  {
    "name": "Signature Provider unit tests Ensure no signature is given within a string.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure no signature is given within a line comment.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure no signature is given within a comment tailing a command.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure signature is given for built-in print command.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected at end of source.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected at beginning of source.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected within a string.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected immediately before a string.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected immediately in a string.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected within a comment.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected within a trailing comment.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected at the very end of a trailing comment.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected within a multiline string.",
    "time": 0.001
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected at the very last quote on a multiline string.",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected within a multiline string (double-quoted).",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected at the very last quote on a multiline string (double-quoted).",
    "time": 0
  },
  {
    "name": "Signature Provider unit tests Ensure isPositionInsideStringOrComment is behaving as expected during construction of a multiline string (double-quoted).",
    "time": 0.001
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned",
    "time": 0.003
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned (for untitled documents)",
    "time": 0.002
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned with a debounce of 100ms",
    "time": 0.001
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned with a debounce of 100ms (for untitled documents)",
    "time": 0.002
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are not returned when cancelled",
    "time": 0.002
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are not returned when cancelled (for untitled documents)",
    "time": 0.002
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned only for the last request",
    "time": 0.102
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned for all the requests when the doc is untitled",
    "time": 0.104
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned for multiple documents",
    "time": 0.004
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned for multiple untitled documents",
    "time": 0.006
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned for multiple documents with a debounce of 100ms",
    "time": 0.102
  },
  {
    "name": "Jedi Symbol Provider Ensure symbols are returned for multiple untitled documents with a debounce of 100ms",
    "time": 0.105
  },
  {
    "name": "Jedi Symbol Provider Ensure IFileSystem.arePathsSame is used",
    "time": 0.017
  },
  {
    "name": "Language Server Symbol Provider Ensure symbols are returned - simple",
    "time": 0.002
  },
  {
    "name": "Language Server Symbol Provider Ensure symbols are returned - minimal",
    "time": 0.003
  },
  {
    "name": "Language Server Symbol Provider Ensure symbols are returned - full",
    "time": 0.001
  },
  {
    "name": "Lint Manager Unit Tests Linter manager isLintingEnabled checks availability when silent = false.",
    "time": 0.001
  },
  {
    "name": "Lint Manager Unit Tests Linter manager isLintingEnabled does not check availability when silent = true.",
    "time": 0
  },
  {
    "name": "Lint Manager Unit Tests Linter manager getActiveLinters checks availability when silent = false.",
    "time": 0
  },
  {
    "name": "Lint Manager Unit Tests Linter manager getActiveLinters checks availability when silent = true.",
    "time": 0
  },
  {
    "name": "Linting Scenarios No linting with PyLint (enabled) when disabled at top-level",
    "time": 0.005
  },
  {
    "name": "Linting Scenarios No linting with Pylint disabled (and Flake8 enabled)",
    "time": 0.003
  },
  {
    "name": "Linting Scenarios Disable Flake8 and run linter",
    "time": 0.002
  },
  {
    "name": "Linting Scenarios Enable Flake8 and run linter",
    "time": 0.006
  },
  {
    "name": "Linting Scenarios Disable Pylint and run linter",
    "time": 0.001
  },
  {
    "name": "Linting Scenarios Enable Pylint and run linter",
    "time": 0.005
  },
  {
    "name": "Linting Scenarios Disable Pep8 and run linter",
    "time": 0.002
  },
  {
    "name": "Linting Scenarios Enable Pep8 and run linter",
    "time": 0.003
  },
  {
    "name": "Linting Scenarios Disable Pydocstyle and run linter",
    "time": 0.003
  },
  {
    "name": "Linting Scenarios Enable Pydocstyle and run linter",
    "time": 0.005
  },
  {
    "name": "Linting Scenarios PyLint enabled with minimal checkers",
    "time": 0.005
  },
  {
    "name": "Linting Scenarios PyLint disabled with minimal checkers",
    "time": 0.006
  },
  {
    "name": "Linting Scenarios PyLint enabled without minimal checkers",
    "time": 0.006
  },
  {
    "name": "Linting Scenarios PyLint disabled without minimal checkers",
    "time": 0.001
  },
  {
    "name": "Linting Scenarios Check Flake8 messages",
    "time": 0.003
  },
  {
    "name": "Linting Scenarios Check Pylint messages",
    "time": 0.004
  },
  {
    "name": "Linting Scenarios Check Pep8 messages",
    "time": 0.006
  },
  {
    "name": "Linting Scenarios Check Pydocstyle messages",
    "time": 0.002
  },
  {
    "name": "Linting Scenarios Three line output counted as one message (Pylint)",
    "time": 0.003
  },
  {
    "name": "Linting Products All linting products are represented by linters",
    "time": 0
  },
  {
    "name": "Linting Products All linters match linting products",
    "time": 0
  },
  {
    "name": "Linting Products All linting product names match linter IDs",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Availability feature is disabled when global default for jediEnabled=true.",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests Availability feature is enabled when global default for jediEnabled=false.",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Prompt will be performed when linter is not configured at all for the workspace, workspace-folder, or the user",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests No prompt performed when linter is configured as enabled for the workspace",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests No prompt performed when linter is configured as enabled for the entire user",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests No prompt performed when linter is configured as enabled for the workspace-folder",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter is enabled after being prompted and &quot;Enable &lt;linter&gt;&quot; is selected",
    "time": 0.003
  },
  {
    "name": "Linter Availability Provider tests Linter is left unconfigured and prompt is disabled when &quot;Do not show again&quot; is selected",
    "time": 0.002
  },
  {
    "name": "Linter Availability Provider tests Linter is left unconfigured and no notification is shown if prompt is disabled",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests Linter is left unconfigured after being prompted and the prompt is disabled without any selection made",
    "time": 0.002
  },
  {
    "name": "Linter Availability Provider tests Linter is left unconfigured when &quot;Not now&quot; is selected",
    "time": 0.004
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when feature disabled",
    "time": 0.005
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when linter is configured (enabled)",
    "time": 0.002
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when linter is configured (disabled)",
    "time": 0.002
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when linter is unavailable in current workspace environment",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when user is prompted and prompt is dismissed",
    "time": 0.003
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when user is prompted and &quot;Do not show again&quot; is selected",
    "time": 0.003
  },
  {
    "name": "Linter Availability Provider tests Overall implementation does not change configuration when user is prompted and &quot;Not now&quot; is selected",
    "time": 0.003
  },
  {
    "name": "Linter Availability Provider tests Overall implementation changes configuration when user is prompted and &quot;Enable &lt;linter&gt;&quot; is selected",
    "time": 0.003
  },
  {
    "name": "Linter Availability Provider tests Discovery of linter is available in the environment returns true when it succeeds and is present",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests Discovery of linter is available in the environment returns false when it succeeds and is not present",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests Linter Availability No linters when there are no workspaces",
    "time": 0.001
  },
  {
    "name": "Linter Availability Provider tests Linter Availability No linters when there are no config files (use default workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability No linters when there none of the config files exist (use default workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability Linters exist when all of the config files exist (use default workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability Linters exist when one of the config files exist (use default workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability No linters when there are no config files (has a corresponding workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability No linters when there none of the config files exist (has a corresponding workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability Linters exist when all of the config files exist (has a corresponding workspace)",
    "time": 0
  },
  {
    "name": "Linter Availability Provider tests Linter Availability Linters exist when one of the config files exist (has a corresponding workspace)",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Commands are registered",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Run Linting method will lint all open files",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;on&apos; and select nothing",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;on&apos; and select &apos;on&apos;",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;on&apos; and select &apos;off&apos;",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;off&apos; and select &apos;on&apos;",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Enable linting should check if linting is enabled, and display current state of &apos;off&apos; and select &apos;off&apos;",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Commands Set Linter should display a quickpick",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Set Linter should display a quickpick and currently active linter when only one is enabled",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Commands Set Linter should display a quickpick and with message about multiple linters being enabled",
    "time": 0
  },
  {
    "name": "Linting - Linter Commands Selecting a linter should display warning message about multiple linters",
    "time": 0.001
  },
  {
    "name": "Linter Info - Pylint Test disabled when Pylint is explicitly disabled",
    "time": 0.001
  },
  {
    "name": "Linter Info - Pylint Test disabled when Jedi is enabled and Pylint is explicitly disabled",
    "time": 0
  },
  {
    "name": "Linter Info - Pylint Test enabled when Jedi is enabled and Pylint is explicitly enabled",
    "time": 0
  },
  {
    "name": "Linter Info - Pylint Test disabled when using Language Server and Pylint is not configured",
    "time": 0.001
  },
  {
    "name": "Linter Info - Pylint Test is enabled when using Language Server and Pylint is configured When workspaceFolder setting is provided",
    "time": 0
  },
  {
    "name": "Linter Info - Pylint Test is enabled when using Language Server and Pylint is configured When workspace setting is provided",
    "time": 0.001
  },
  {
    "name": "Linter Info - Pylint Test is enabled when using Language Server and Pylint is configured When global setting is provided",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager Get all linters will return a list of all linters",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Manager Get linter info for non-linter product should throw an exception",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Manager Pylint configuration file watch",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager Enable linting should update config (enable) &amp; (without a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager Enable linting should update config (disable) &amp; (without a resource)",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Manager getActiveLinters will check if linter is enabled and in silent mode (without a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager getActiveLinters will check if linter is enabled and not in silent mode (without a resource)",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Manager setActiveLintersAsync with invalid products does nothing (without a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager setActiveLintersAsync with single product will disable it then enable it (without a resource)",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Manager setActiveLintersAsync with single product will disable all existing then enable the necessary two (without a resource)",
    "time": 0.001
  },
  {
    "name": "Linting - Linter Manager Enable linting should update config (enable) &amp; (with a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager Enable linting should update config (disable) &amp; (with a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager getActiveLinters will check if linter is enabled and in silent mode (with a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager getActiveLinters will check if linter is enabled and not in silent mode (with a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager setActiveLintersAsync with invalid products does nothing (with a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager setActiveLintersAsync with single product will disable it then enable it (with a resource)",
    "time": 0
  },
  {
    "name": "Linting - Linter Manager setActiveLintersAsync with single product will disable all existing then enable the necessary two (with a resource)",
    "time": 0.001
  },
  {
    "name": "Linting - MyPy regex",
    "time": 0.001
  },
  {
    "name": "Linters Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "Import Sort Provider Ensure command is registered",
    "time": 0.001
  },
  {
    "name": "Import Sort Provider Ensure message is displayed when no doc is opened and uri isn&apos;t provided",
    "time": 0
  },
  {
    "name": "Import Sort Provider Ensure message is displayed when uri isn&apos;t provided and current doc is non-python",
    "time": 0.002
  },
  {
    "name": "Import Sort Provider Ensure document is opened",
    "time": 0
  },
  {
    "name": "Import Sort Provider Ensure no edits are provided when there is only one line",
    "time": 0.001
  },
  {
    "name": "Import Sort Provider Ensure no edits are provided when there are no lines",
    "time": 0.001
  },
  {
    "name": "Import Sort Provider Ensure empty line is added when line does not end with an empty line",
    "time": 0.002
  },
  {
    "name": "Import Sort Provider Ensure no edits are provided when there is only one line (when using provider method)",
    "time": 0.003
  },
  {
    "name": "Import Sort Provider Ensure no edits are provided when there are no lines (when using provider method)",
    "time": 0.002
  },
  {
    "name": "Import Sort Provider Ensure temporary file is created for sorting when document is dirty",
    "time": 0.003
  },
  {
    "name": "Import Sort Provider Ensure temporary file is created for sorting when document is dirty (with custom isort path)",
    "time": 0.003
  },
  {
    "name": "REPL Provider Ensure command is registered",
    "time": 0.001
  },
  {
    "name": "REPL Provider Ensure command handler is disposed",
    "time": 0
  },
  {
    "name": "REPL Provider Ensure resource is &apos;undefined&apos; if theres no active document nor a workspace",
    "time": 0.001
  },
  {
    "name": "REPL Provider Ensure resource is uri of the active document",
    "time": 0.002
  },
  {
    "name": "REPL Provider Ensure resource is &apos;undefined&apos; if the active document is not used if it is untitled (new document)",
    "time": 0.002
  },
  {
    "name": "REPL Provider Ensure first available workspace folder is used if there no document",
    "time": 0.001
  },
  {
    "name": "Common Providers Service Registry Ensure services are registered",
    "time": 0
  },
  {
    "name": "Shebang detection Shebang should be empty when first line is empty",
    "time": 0.001
  },
  {
    "name": "Shebang detection Shebang should be empty when python path is invalid in shebang",
    "time": 0.001
  },
  {
    "name": "Shebang detection Shebang should be returned when python path is valid",
    "time": 0.001
  },
  {
    "name": "Shebang detection Shebang should be returned when python path is valid and text is&apos;/usr/bin/env python&apos;",
    "time": 0.001
  },
  {
    "name": "Shebang detection Shebang should be returned when python path is valid and text is&apos;/usr/bin/env python&apos; and is windows",
    "time": 0.001
  },
  {
    "name": "Shebang detection No code lens when there&apos;s no shebang",
    "time": 0
  },
  {
    "name": "Shebang detection No code lens when shebang is an empty string",
    "time": 0
  },
  {
    "name": "Shebang detection No code lens when python path in settings is the same as that in shebang",
    "time": 0.001
  },
  {
    "name": "Shebang detection Code lens returned when python path in settings is different to one in shebang",
    "time": 0
  },
  {
    "name": "Terminal Provider Ensure command is registered",
    "time": 0
  },
  {
    "name": "Terminal Provider Ensure command handler is disposed",
    "time": 0
  },
  {
    "name": "Terminal Provider Ensure terminal is created and displayed when command is invoked",
    "time": 0.001
  },
  {
    "name": "Terminal Provider Ensure terminal creation does not use uri of the active documents which is untitled",
    "time": 0.002
  },
  {
    "name": "Terminal Provider Ensure terminal creation uses uri of active document",
    "time": 0.003
  },
  {
    "name": "Terminal Provider Ensure terminal creation uses uri of active workspace",
    "time": 0.001
  },
  {
    "name": "Source Map Support Test message is not displayed when source maps are not enabled",
    "time": 0.103
  },
  {
    "name": "Source Map Support Test message is not displayed when source maps are not enabled",
    "time": 0.001
  },
  {
    "name": "Source Map Support Test message is not displayed when source maps are not enabled",
    "time": 0.001
  },
  {
    "name": "Source Map Support Rename extension and debugger source maps when enabling source maps",
    "time": 0.001
  },
  {
    "name": "Source Map Support Rename extension and debugger source maps when disabling source maps",
    "time": 0.001
  },
  {
    "name": "Import Tracker Open document",
    "time": 0.007
  },
  {
    "name": "Import Tracker Already opened documents",
    "time": 0.005
  },
  {
    "name": "Import Tracker Save document",
    "time": 0.006
  },
  {
    "name": "Import Tracker from &lt;pkg&gt;._ import _, _",
    "time": 0.007
  },
  {
    "name": "Import Tracker from &lt;pkg&gt;._ import _",
    "time": 0.007
  },
  {
    "name": "Import Tracker import &lt;pkg&gt; as _",
    "time": 0.009
  },
  {
    "name": "Import Tracker from &lt;pkg&gt; import _",
    "time": 0.007
  },
  {
    "name": "Import Tracker from &lt;pkg&gt; import _ as _",
    "time": 0.005
  },
  {
    "name": "Import Tracker import &lt;pkg1&gt;, &lt;pkg2&gt;",
    "time": 0.008
  },
  {
    "name": "Import Tracker Import from within a function",
    "time": 0.005
  },
  {
    "name": "Import Tracker Do not send the same package twice",
    "time": 0.005
  },
  {
    "name": "Import Tracker Ignore relative imports",
    "time": 0.002
  },
  {
    "name": "Import Tracker Ignore docstring for `from` imports",
    "time": 0.003
  },
  {
    "name": "Import Tracker Ignore docstring for `import` imports",
    "time": 0.003
  },
  {
    "name": "Telemetry Send Telemetry",
    "time": 0.021
  },
  {
    "name": "Telemetry Send Telemetry",
    "time": 0.024
  },
  {
    "name": "Telemetry Send Error Telemetry",
    "time": 0.043
  },
  {
    "name": "Telemetry Send Error Telemetry",
    "time": 0.022
  },
  {
    "name": "Telemetry Ensure non extension file paths are stripped from stack trace",
    "time": 0.029
  },
  {
    "name": "Telemetry Ensure non function names containing file names (unlikely, but for sake of completeness) are stripped from stack trace",
    "time": 0.025
  },
  {
    "name": "Telemetry Function isTelemetryDisabled() Returns true when globalValue is set to false",
    "time": 0.001
  },
  {
    "name": "Telemetry Function isTelemetryDisabled() Returns false otherwise",
    "time": 0.001
  },
  {
    "name": "Terminal - Activation checkExperiments() - default",
    "time": 0.002
  },
  {
    "name": "Terminal - Activation checkExperiments() - icon 1",
    "time": 0
  },
  {
    "name": "Terminal - Activation checkExperiments() - icon 2",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Manager Ensure commands are registered",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeFileInterTerminal will do nothing if no file is avialble",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeFileInterTerminal will use provided file",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeFileInterTerminal will use active file",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeSelectionInTerminal will do nothing if theres no active document",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeSelectionInDjangoShell will do nothing if theres no active document",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeSelectionInTerminal will do nothing if no text is selected",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeSelectionInDjangoShell will do nothing if no text is selected",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeSelectionInTerminal will normalize selected text and send it to the terminal",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Manager Ensure executeSelectionInDjangoShell will normalize selected text and send it to the terminal",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure fully qualified python path is escaped when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure fully qualified python path is returned as is, when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure python path is returned as is, when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure fully qualified python path is returned as is, on non Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure python path is returned as is, on non Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure current workspace folder (containing spaces) is used to prefix manage.py",
    "time": 0.001
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure current workspace folder (without spaces) is used to prefix manage.py",
    "time": 0
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure default workspace folder (containing spaces) is used to prefix manage.py",
    "time": 0
  },
  {
    "name": "Terminal - Django Shell Code Execution Ensure default workspace folder (without spaces) is used to prefix manage.py",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Terminal Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (windows)",
    "time": 1.002
  },
  {
    "name": "Terminal - Code Execution Terminal Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (osx)",
    "time": 1.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (linux)",
    "time": 1
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file (non windows)",
    "time": 0.003
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file (windows)",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we set current directory (and quote it when containing spaces) before executing file (windows)",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we do not set current directory before executing file if in the same directory (non windows)",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we do not set current directory before executing file if in the same directory (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file if file is not in a workspace (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure we set current directory before executing file if file is not in a workspace (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure python file execution script is sent to terminal on windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure python file execution script is sent to terminal on windows with fully qualified python path",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure python file execution script is not quoted when no spaces in file path",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure python file execution script supports custom python arguments",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure fully qualified python path is escaped when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure fully qualified python path is returned as is, when building repl args on Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure python path is returned as is, when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure fully qualified python path is returned as is, on non Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure python path is returned as is, on non Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure nothing happens when blank text is sent to the terminal",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure repl is initialized once before sending text to the repl",
    "time": 1.001
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure repl is re-initialized when terminal is closed",
    "time": 3.008
  },
  {
    "name": "Terminal - Code Execution Terminal Execution Ensure code is sent to terminal",
    "time": 1.003
  },
  {
    "name": "Terminal - Code Execution Repl Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (windows)",
    "time": 1.002
  },
  {
    "name": "Terminal - Code Execution Repl Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (osx)",
    "time": 1.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (linux)",
    "time": 1.005
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we set current directory before executing file (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we set current directory before executing file (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we set current directory (and quote it when containing spaces) before executing file (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we do not set current directory before executing file if in the same directory (non windows)",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we do not set current directory before executing file if in the same directory (windows)",
    "time": 0.002
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we set current directory before executing file if file is not in a workspace (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure we set current directory before executing file if file is not in a workspace (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure python file execution script is sent to terminal on windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure python file execution script is sent to terminal on windows with fully qualified python path",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure python file execution script is not quoted when no spaces in file path",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure python file execution script supports custom python arguments",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure fully qualified python path is escaped when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure fully qualified python path is returned as is, when building repl args on Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure python path is returned as is, when building repl args on Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure fully qualified python path is returned as is, on non Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure python path is returned as is, on non Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure nothing happens when blank text is sent to the terminal",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure repl is initialized once before sending text to the repl",
    "time": 1.002
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure repl is re-initialized when terminal is closed",
    "time": 3.007
  },
  {
    "name": "Terminal - Code Execution Repl Execution Ensure code is sent to terminal",
    "time": 1.005
  },
  {
    "name": "Terminal - Code Execution Django Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (windows)",
    "time": 1
  },
  {
    "name": "Terminal - Code Execution Django Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (osx)",
    "time": 1.001
  },
  {
    "name": "Terminal - Code Execution Django Execution (validation of title) Ensure terminal is created upon invoking initializeRepl (linux)",
    "time": 1.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we set current directory before executing file (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we set current directory before executing file (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we set current directory (and quote it when containing spaces) before executing file (non windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we set current directory (and quote it when containing spaces) before executing file (windows)",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we do not set current directory before executing file if in the same directory (non windows)",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we do not set current directory before executing file if in the same directory (windows)",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we set current directory before executing file if file is not in a workspace (non windows)",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure we set current directory before executing file if file is not in a workspace (windows)",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure python file execution script is sent to terminal on windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure python file execution script is sent to terminal on windows with fully qualified python path",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure python file execution script is not quoted when no spaces in file path",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure python file execution script supports custom python arguments",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure fully qualified python path is escaped when building repl args on Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure fully qualified python path is returned as is, when building repl args on Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure python path is returned as is, when building repl args on Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure fully qualified python path is returned as is, on non Windows",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure python path is returned as is, on non Windows",
    "time": 0.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure nothing happens when blank text is sent to the terminal",
    "time": 0
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure repl is initialized once before sending text to the repl",
    "time": 1.001
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure repl is re-initialized when terminal is closed",
    "time": 3.008
  },
  {
    "name": "Terminal - Code Execution Django Execution Ensure code is sent to terminal",
    "time": 1.002
  },
  {
    "name": "Terminal - Service Registry Ensure all services get registered",
    "time": 0.003
  },
  {
    "name": "Language Server Survey Banner Is debugger enabled upon creation?",
    "time": 0.001
  },
  {
    "name": "Language Server Survey Banner Do not show banner when it is disabled",
    "time": 0.002
  },
  {
    "name": "Language Server Survey Banner shouldShowBanner must return false when Banner is implicitly disabled by sampling",
    "time": 0.001
  },
  {
    "name": "Language Server Survey Banner Survey URL is as expected for Language Server version &apos;1.2.3&apos;.",
    "time": 0.001
  },
  {
    "name": "Language Server Survey Banner Survey URL is as expected for Language Server version &apos;1.2.3-alpha&apos;.",
    "time": 0.002
  },
  {
    "name": "Language Server Survey Banner Survey URL is as expected for Language Server version &apos;0.0.1234567890&apos;.",
    "time": 0.001
  },
  {
    "name": "Language Server Survey Banner Survey URL is as expected for Language Server version &apos;1234567890.0.1&apos;.",
    "time": 0.002
  },
  {
    "name": "Language Server Survey Banner Survey URL is as expected for Language Server version &apos;1.0.1-alpha+2&apos;.",
    "time": 0.002
  },
  {
    "name": "Language Server Survey Banner Survey URL is as expected for Language Server version &apos;22.4.999-rc.6&apos;.",
    "time": 0.002
  },
  {
    "name": "Propose New Language Server Banner Is debugger enabled upon creation?",
    "time": 0.002
  },
  {
    "name": "Propose New Language Server Banner Do not show banner when it is disabled",
    "time": 0
  },
  {
    "name": "Propose New Language Server Banner shouldShowBanner must return false when Banner is implicitly disabled by sampling",
    "time": 0
  },
  {
    "name": "Propose New Language Server Banner shouldShowBanner must return false when Banner is explicitly disabled",
    "time": 0.001
  },
  {
    "name": "Code lenses - Test files Function getTestFileWhichNeedsCodeLens() returns `undefined` if there are no workspace corresponding to document",
    "time": 0
  },
  {
    "name": "Code lenses - Test files Function getTestFileWhichNeedsCodeLens() returns `undefined` if test storage is empty",
    "time": 0.001
  },
  {
    "name": "Code lenses - Test files Function getTestFileWhichNeedsCodeLens() returns `undefined` if tests returned from storage does not contain document",
    "time": 0.001
  },
  {
    "name": "Code lenses - Test files Function getTestFileWhichNeedsCodeLens() returns test file if tests returned from storage contains document",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Arguments Helper Get Option Value",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Option Value when using =",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Option Values",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Option Values when using =",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Positional options",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Arguments Helper Get multiple Positional options",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get multiple Positional options and inline values",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Positional options with trailing value option",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get multiple Positional options with trailing value option",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Positional options with unknown args",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Get Positional options with no options parameters",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Arguments Helper Filter to remove those with values",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Filter to remove those without values",
    "time": 0
  },
  {
    "name": "Unit Tests - Arguments Helper Filter to remove those with and without values",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must launch debugger (Test Framework &apos;nosetest&apos;)",
    "time": 0.003
  },
  {
    "name": "Unit Tests - Debug Launcher Must launch debugger with arguments (Test Framework &apos;nosetest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must not launch debugger if cancelled (Test Framework &apos;nosetest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must throw an exception if there are no workspaces (Test Framework &apos;nosetest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must launch debugger (Test Framework &apos;pytest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must launch debugger with arguments (Test Framework &apos;pytest&apos;)",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Must not launch debugger if cancelled (Test Framework &apos;pytest&apos;)",
    "time": 0
  },
  {
    "name": "Unit Tests - Debug Launcher Must throw an exception if there are no workspaces (Test Framework &apos;pytest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must launch debugger (Test Framework &apos;unittest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must launch debugger with arguments (Test Framework &apos;unittest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must not launch debugger if cancelled (Test Framework &apos;unittest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Must throw an exception if there are no workspaces (Test Framework &apos;unittest&apos;)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Tries launch.json first",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Full debug config",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Uses first entry",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Handles bad JSON",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Handles malformed launch.json - test 1",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Handles malformed launch.json - test 2",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Handles malformed launch.json - test 3",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Handles malformed launch.json - test 4",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Handles bad debug config items",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Handles non-python debug configs",
    "time": 0.004
  },
  {
    "name": "Unit Tests - Debug Launcher Handles bogus python debug configs",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Handles non-test debug config",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Handles mixed debug config",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Debug Launcher Handles comments",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Debug Launcher Ensure trailing commands in JSON are handled",
    "time": 0
  },
  {
    "name": "Unit Tests - Debug Launcher Ensure empty configuration is returned when launch.json cannot be parsed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager nose Discovering tests should display test manager",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager nose When failing to discover tests prompt to install test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager nose When failing to discover tests do not prompt to install test framework",
    "time": 0
  },
  {
    "name": "Unit Tests - Base Test Manager nose When failing to discover tests do not prompt to install test framework if installed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager pytest Discovering tests should display test manager",
    "time": 0
  },
  {
    "name": "Unit Tests - Base Test Manager pytest When failing to discover tests prompt to install test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager pytest When failing to discover tests do not prompt to install test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager pytest When failing to discover tests do not prompt to install test framework if installed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Base Test Manager unittest Discovering tests should display test manager",
    "time": 0
  },
  {
    "name": "Unit Test Configuration Manager (unit) pytest Enabling a test product shoud disable other products",
    "time": 0.002
  },
  {
    "name": "Unit Test Configuration Manager (unit) unittest Enabling a test product shoud disable other products",
    "time": 0.001
  },
  {
    "name": "Unit Test Configuration Manager (unit) nosetest Enabling a test product shoud disable other products",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Update Test Arguments with workspace Uri without workspaces",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with pytest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Update Test Arguments with workspace Uri without workspaces",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Update Test Arguments with workspace Uri with one workspace",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with pytest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Update Test Arguments with workspace Uri without workspaces",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with pytest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Update Test Arguments with workspace Uri without workspaces",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with unittest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Update Test Arguments with workspace Uri without workspaces",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with unittest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Update Test Arguments with workspace Uri without workspaces",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Update Test Arguments with workspace Uri with one workspace",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with unittest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with nosetest Update Test Arguments with workspace Uri without workspaces",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with nosetest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with nosetest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;updateTestArgs&apos; method with nosetest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with nosetest Update Test Arguments with workspace Uri without workspaces",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with nosetest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with nosetest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;disable&apos; method with nosetest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with nosetest Update Test Arguments with workspace Uri without workspaces",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with nosetest Update Test Arguments with workspace Uri with one workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with nosetest Update Test Arguments with workspace Uri with more than one workspace and uri belongs to a workspace",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigSettingsService Test &apos;enable&apos; method with nosetest Expect an exception when updating Test Arguments with workspace Uri with more than one workspace and uri does not belong to a workspace",
    "time": 0.001
  },
  {
    "name": "Unit Tests - BufferedTestConfigSettingsService config changes are pushed when apply() is called",
    "time": 0.002
  },
  {
    "name": "Unit Tests - BufferedTestConfigSettingsService applied changes are cleared",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Context Service register will add event handler",
    "time": 0
  },
  {
    "name": "Unit Tests - Context Service Status change without tests does not update hasFailedTests",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Context Service Status change without a summary does not update hasFailedTests",
    "time": 0
  },
  {
    "name": "Unit Tests - Context Service Status change with a summary updates hasFailedTests to false",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Context Service Status change with a summary and failures updates hasFailedTests to false",
    "time": 0
  },
  {
    "name": "Unit Tests - Context Service Status change with status of running",
    "time": 0
  },
  {
    "name": "Unit Tests - Context Service Status change with status of discovering",
    "time": 0
  },
  {
    "name": "Unit Tests - Context Service Status change with status of others",
    "time": 0
  },
  {
    "name": "Services - Discovered test parser Parse returns empty tests if resource does not belong to workspace",
    "time": 0.001
  },
  {
    "name": "Services - Discovered test parser Parse returns expected tests otherwise",
    "time": 0
  },
  {
    "name": "Unit Tests - Common Discovery Use parser to parse results",
    "time": 0
  },
  {
    "name": "Unit Tests - Common Discovery Invoke Python Code to discover tests",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestUtils Get TestType for Folders",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get TestType for Files",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get TestType for Functions",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestUtils Get TestType for Suites",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Casting to a specific items",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get Parent of folder",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get Parent of file",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get Parent File",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get Parent Suite",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestUtils Get Parent file throws an exception",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestUtils Get parent of orphaned items",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get Parent of suite",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get Parent of function",
    "time": 0
  },
  {
    "name": "Unit Tests - TestUtils Get parent of parameterized function",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestUtils Get children of parameterized function",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Storage Service Merge Status from existing tests",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Tests Results Service If any test fails, parent fails",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Tests Results Service If all tests pass, parent passes",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Tests Results Service If no tests run, parent status is not run",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Tests Results Service Number of functions passed, not run and failed are correctly calculated",
    "time": 0
  },
  {
    "name": "Unit Tests - Tests Status Updater Updating discovery status will recursively update all items and triggers an update for each",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Tests Status Updater Updating unknown status will recursively update all items and triggers an update for each",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Tests Status Updater Updating running status will recursively update all items and triggers an update for each",
    "time": 0
  },
  {
    "name": "Unit Tests - Tests Status Updater Updating running status for failed tests will recursively update all items and triggers an update for each",
    "time": 0
  },
  {
    "name": "Unit Tests - Tests Status Updater Updating idle status for runnings tests will recursively update all items and triggers an update for each",
    "time": 0
  },
  {
    "name": "Unit Tests - Tests Status Updater Triggers an update for each",
    "time": 0
  },
  {
    "name": "Unit Tests - Track Enablement Add handler for onDidChangeConfiguration",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Track Enablement handler for onDidChangeConfiguration is onDidChangeConfiguration",
    "time": 0
  },
  {
    "name": "Unit Tests - Track Enablement If there are no workspaces and nothing changed, then do not send telemetry",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Track Enablement Check whether unitest, pytest and nose settings have been enabled",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Track Enablement Check settings related to unitest, pytest and nose",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Track Enablement Send telemetry for unitest",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Track Enablement Send telemetry for pytest",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Track Enablement Send telemetry for nosetest",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Enable Test when setting testing.promptToConfigure is enabled",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Enable Test when setting testing.promptToConfigure is disabled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Select Test runner displays 3 items",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Ensure selected item is returned",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Ensure undefined is returned when nothing is seleted",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Prompt to enable a test if a test framework is not enabled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Prompt to select a test if a test framework is not enabled",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Configure selected test framework and disable others",
    "time": 0.003
  },
  {
    "name": "Unit Tests - ConfigurationService pytest If more than one test framework is enabled, then prompt to select a test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService pytest If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService pytest Prompt to enable and configure selected test framework",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Enable Test when setting testing.promptToConfigure is enabled",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Enable Test when setting testing.promptToConfigure is disabled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Select Test runner displays 3 items",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Ensure selected item is returned",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Ensure undefined is returned when nothing is seleted",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Prompt to enable a test if a test framework is not enabled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Prompt to select a test if a test framework is not enabled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Configure selected test framework and disable others",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest If more than one test framework is enabled, then prompt to select a test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService unittest Prompt to enable and configure selected test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Enable Test when setting testing.promptToConfigure is enabled",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Enable Test when setting testing.promptToConfigure is disabled",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Enable Test when setting testing.promptToConfigure is disabled and fail to update the settings",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Select Test runner displays 3 items",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Ensure selected item is returned",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Ensure undefined is returned when nothing is seleted",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Prompt to enable a test if a test framework is not enabled",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Prompt to select a test if a test framework is not enabled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Configure selected test framework and disable others",
    "time": 0.003
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest If more than one test framework is enabled, then prompt to select a test framework",
    "time": 0.006
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest If more than one test framework is enabled, then prompt to select a test framework and enable test, but do not configure",
    "time": 0.002
  },
  {
    "name": "Unit Tests - ConfigurationService nosetest Prompt to enable and configure selected test framework",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ConfigurationManagerFactory Create Unit Test Configuration",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationManagerFactory Create pytest Configuration",
    "time": 0
  },
  {
    "name": "Unit Tests - ConfigurationManagerFactory Create nose Configuration",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestResultDisplay Should create a status bar item upon instantiation",
    "time": 0
  },
  {
    "name": "Unit Tests - TestResultDisplay Should be disabled upon instantiation",
    "time": 0
  },
  {
    "name": "Unit Tests - TestResultDisplay Enable display should show the statusbar",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestResultDisplay Disable display should hide the statusbar",
    "time": 0
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is displayed and updated with progress with ability to stop tests",
    "time": 0.002
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is updated with success with ability to view ui without any results",
    "time": 0.003
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is updated with success with ability to view ui with results",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is updated with error when cancelled by user with ability to view ui with results",
    "time": 0.004
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is updated, and error message display with error in running tests, with ability to view ui with results",
    "time": 0.002
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is displayed and updated with progress with ability to stop test discovery",
    "time": 0.001
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is displayed and updated with success and no tests, with ability to view ui to view results of test discovery",
    "time": 0.003
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure tests are disabled when there are errors and user choses to disable tests",
    "time": 0.004
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure corresponding command is executed when there are errors and user choses to configure test framework",
    "time": 0.005
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is displayed and updated with error info when test discovery is cancelled by the user",
    "time": 0.002
  },
  {
    "name": "Unit Tests - TestResultDisplay Ensure status bar is displayed and updated with error info, and message is displayed when test discovery is fails due to errors",
    "time": 0.003
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunAll (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunFolder (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunFolder (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from ViewTestOutput (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from Null (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunAll from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunFailed (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunFolder (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunClass (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from ViewTestOutput (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ReDiscover from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunFailed (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunFolder (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from ViewTestOutput (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from SelectAndRunMethod (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFailed from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from ReDiscover (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunFailed (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunFailed (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from ViewTestOutput (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFolder from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunAll (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunAll (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunFailed (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunFile from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from SelectAndRunMethod (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunClass from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunFile (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunClass (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from RunMethod (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from Null (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection RunMethod from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunAll (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunAll (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunFolder (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunFolder (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from ViewTestOutput (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from Null (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection ViewTestOutput from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunFailed (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunFailed (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunFolder (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunFile (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunMethod (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from RunMethod (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from ViewTestOutput (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Null from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunAll (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from ReDiscover (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunClass (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunMethod (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from ViewTestOutput (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from Null (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection SelectAndRunMethod from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunAll (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunAll (No debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from Null (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from DebugMethod (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection DebugMethod from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunAll (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunAll (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from ReDiscover (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from ReDiscover (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunFailed (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunFailed (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunFolder (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunFolder (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunFile (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunFile (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunClass (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunClass (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from RunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from ViewTestOutput (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from ViewTestOutput (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from Null (Debug)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from Null (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from SelectAndRunMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from SelectAndRunMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from DebugMethod (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from DebugMethod (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from Configure (Debug)",
    "time": 0
  },
  {
    "name": "Unit Tests - Picker (execution of commands) Invoking command for selection Configure from Configure (No debug)",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Activation will add command handlers",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Change handler will invoke the command to reveal the nodes (for failed and errored items)",
    "time": 0.002
  },
  {
    "name": "Unit Tests Test Explorer View Items Change handler will not invoke the command to reveal the nodes (for failed and errored suites, files &amp; folders)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Commands are registered",
    "time": 0
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Handlers are disposed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Opening a file will invoke correct command",
    "time": 0
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Opening a test suite will invoke correct command",
    "time": 0
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Opening a test function will invoke correct command",
    "time": 0
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Running a file will invoke correct command",
    "time": 0
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Running a suite will invoke correct command",
    "time": 0
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Running a function will invoke correct command",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Debugging a file will invoke correct command",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Debugging a suite will invoke correct command",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Test Explorer Command Handler Debugging a function will invoke correct command",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer View Items Test root folder created into test view item",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Test file created into test view item",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer View Items Test suite created into test view item",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Test function created into test view item",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Test suite function created into test view item",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Test subtest parent created into test view item",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer View Items Test subtest created into test view item",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Create the initial view and ensure it provides a default view",
    "time": 0.007
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Ensure that updates from the test manager propagate to the TestExplorer",
    "time": 0.002
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc When the test data is updated, the update event is emitted",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc A test file is added/removed/renamed",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc A test suite is added/removed/renamed",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc A test function is added/removed/renamed",
    "time": 0.002
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc A test status changes and is reflected in the tree view",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Get parent is working for each item type",
    "time": 0.002
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Get children is working for each item type",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Tree items for subtests are correct",
    "time": 0.002
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Parents for subtests are correct",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Children for subtests are correct",
    "time": 0.002
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Expand tree item if it does not have any parent",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Expand tree item if the parent is the Workspace Folder in a multiroot scenario",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Misc Do not expand tree item if it does not have any parent",
    "time": 0.001
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Root Nodes The root folder will not be displayed if there are no tests",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Root Nodes The root folder will not be displayed if there are no test files directly under the root",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Root Nodes Files &amp; folders under root folder are returned as children",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer TestTreeViewProvider Root Nodes Root folders are returned as children",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer Tree View Activation will create the treeview",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer Tree View Activation will add command handlers",
    "time": 0
  },
  {
    "name": "Unit Tests Test Explorer Tree View Invoking the command handler will reveal the node in the tree",
    "time": 0.001
  },
  {
    "name": "Unit Tests - ManagementService Experiments Execute command if in experiment",
    "time": 0
  },
  {
    "name": "Unit Tests - ManagementService Experiments If not in experiment, check and send Telemetry for control group and do not execute command",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure Navigation handlers are registered",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure handlers are disposed",
    "time": 0
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure command handler is reigstered to be disposed",
    "time": 0
  },
  {
    "name": "Unit Tests - Navigation File Ensure file is opened",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation File Ensure errors are swallowed",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Navigation Function Ensure file is opened",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Function Ensure errors are swallowed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Function Ensure we use line number from test function when navigating in file (without focusing code)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Function Ensure we use line number from test function when navigating in file (focusing code)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Function Ensure file is opened and range not revealed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Helper Ensure file is opened",
    "time": 0
  },
  {
    "name": "Unit Tests - Navigation Helper No symbols if symbol provider is not registered",
    "time": 0
  },
  {
    "name": "Unit Tests - Navigation Helper No symbols if no symbols",
    "time": 0
  },
  {
    "name": "Unit Tests - Navigation Helper Returns matching symbol",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Service Registry Ensure services are registered",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Suite Ensure file is opened",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Suite Ensure errors are swallowed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Suite Ensure we use line number from test suite when navigating in file (without focusing code)",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Navigation Suite Ensure we use line number from test suite when navigating in file (focusing code)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Suite Navigating in file (without focusing code)",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Suite Navigating in file (focusing code)",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Navigation Suite Ensure file is opened and range not revealed",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure no symbols are returned when file has not been saved",
    "time": 0
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure no symbols are returned when there are errors in running the code",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure no symbols are returned when there are no symbols to be returned",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Navigation Command Handler Ensure symbols are returned",
    "time": 0.003
  },
  {
    "name": "ArgsService: nosetest Test getting the test folder in nosetest",
    "time": 0
  },
  {
    "name": "ArgsService: nosetest Test getting the test folder in nosetest (with multiple dirs)",
    "time": 0
  },
  {
    "name": "Unit Tests - nose - Discovery Ensure discovery is invoked with the right args",
    "time": 0.002
  },
  {
    "name": "Unit Tests - nose - Discovery Ensure discovery is cancelled",
    "time": 0.002
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest",
    "time": 0.001
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest (with folder before the arguments)",
    "time": 0
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest (with multiple dirs)",
    "time": 0
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest (with multiple dirs in the middle)",
    "time": 0
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest (with single positional dir)",
    "time": 0
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest (with multiple positional dirs)",
    "time": 0
  },
  {
    "name": "ArgsService: pytest Test getting the test folder in pytest (with multiple dirs excluding python files)",
    "time": 0.001
  },
  {
    "name": "ArgsService: pytest Test getting the list of known options for pytest",
    "time": 0
  },
  {
    "name": "ArgsService: pytest Test calling ArgumentsService.getOptionValue with the option followed by the value",
    "time": 0.002
  },
  {
    "name": "ArgsService: pytest Test calling ArgumentsService.getOptionValue with the inline option syntax",
    "time": 0.002
  },
  {
    "name": "Unit Tests - PyTest - Discovery Ensure discovery is invoked when there are no test directories",
    "time": 0.001
  },
  {
    "name": "Unit Tests - PyTest - Discovery Ensure discovery is invoked when there are multiple test directories",
    "time": 0
  },
  {
    "name": "Unit Tests - PyTest - Discovery Build collection arguments",
    "time": 0.001
  },
  {
    "name": "Unit Tests - PyTest - Discovery Build collection arguments with ignore in args",
    "time": 0
  },
  {
    "name": "Unit Tests - PyTest - Discovery Build collection arguments (&amp; ignore)",
    "time": 0
  },
  {
    "name": "Unit Tests - PyTest - Discovery Discover using common discovery",
    "time": 0
  },
  {
    "name": "ArgsService: unittest Test getting the test folder in unittest with -s",
    "time": 0
  },
  {
    "name": "ArgsService: unittest Test getting the test folder in unittest with -s in the middle",
    "time": 0.001
  },
  {
    "name": "ArgsService: unittest Test getting the test folder in unittest with --start-directory",
    "time": 0
  },
  {
    "name": "ArgsService: unittest Test getting the test folder in unittest with --start-directory in the middle",
    "time": 0
  },
  {
    "name": "UnitTestDiagnosticService: unittest TestStatus: Error Message Prefix",
    "time": 0
  },
  {
    "name": "UnitTestDiagnosticService: unittest TestStatus: Error Severity",
    "time": 0
  },
  {
    "name": "UnitTestDiagnosticService: unittest TestStatus: Fail Message Prefix",
    "time": 0
  },
  {
    "name": "UnitTestDiagnosticService: unittest TestStatus: Fail Severity",
    "time": 0
  },
  {
    "name": "UnitTestDiagnosticService: unittest TestStatus: Skipped Message Prefix",
    "time": 0
  },
  {
    "name": "UnitTestDiagnosticService: unittest TestStatus: Skipped Severity",
    "time": 0
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is invoked with the right args with start directory defined with -s",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is invoked with the right args with start directory defined with --start-directory",
    "time": 0.004
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is invoked with the right args without a start directory",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is invoked with the right args without a pattern defined with -p",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is invoked with the right args without a pattern defined with ---pattern",
    "time": 0.006
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is invoked with the right args without a pattern not defined",
    "time": 0.002
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery is cancelled",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery resolves test suites in n-depth directories",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery resolves test files in n-depth directories",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery resolves test suites in n-depth directories when no start directory is given",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery resolves test suites in n-depth directories when a relative start directory is given",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery will not fail with blank content",
    "time": 0.001
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery will not fail with corrupt content",
    "time": 0
  },
  {
    "name": "Unit Tests - Unittest - Discovery Ensure discovery resolves when no tests are found in the given path",
    "time": 0
  },
  {
    "name": "Unit Tests - unittest - run failed tests Run Failed tests",
    "time": 0.002
  },
  {
    "name": "Unit Tests - unittest - run failed tests Run All tests",
    "time": 0.002
  },
  {
    "name": "Workspace Symbols Generator should be disabled",
    "time": 0
  },
  {
    "name": "Workspace Symbols Generator should be enabled",
    "time": 0
  },
  {
    "name": "Workspace Symbols Generator Check tagFilePath",
    "time": 0
  },
  {
    "name": "Workspace Symbols Generator Throw error when generating tags",
    "time": 0.002
  },
  {
    "name": "Workspace Symbols Generator Does not throw error when generating tags",
    "time": 0.002
  },
  {
    "name": "Workspace Symbols Provider Returns 0 tags without any generators",
    "time": 0.001
  },
  {
    "name": "Workspace Symbols Provider Builds tags when a tag file doesn&apos;t exist",
    "time": 0.001
  },
  {
    "name": "Workspace Symbols Provider Builds tags when a tag file doesn&apos;t exist",
    "time": 0.001
  },
  {
    "name": "Workspace Symbols Provider Symbols should not be returned when disabled",
    "time": 0
  },
  {
    "name": "Workspace Symbols Provider symbols should be returned when enabeld and vice versa",
    "time": 0.008
  },
  {
    "name": "Workspace Symbols Provider symbols should be filtered correctly",
    "time": 0.023
  }
]